// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R {
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 14 files.
  struct file {
    /// Resource file `FragmentShader.glsl`.
    static let fragmentShaderGlsl = FileResource(bundle: _R.hostingBundle, name: "FragmentShader", pathExtension: "glsl")
    /// Resource file `PingFang-TC-Medium.otf`.
    static let pingFangTCMediumOtf = FileResource(bundle: _R.hostingBundle, name: "PingFang-TC-Medium", pathExtension: "otf")
    /// Resource file `PingFang-TC-Regular.otf`.
    static let pingFangTCRegularOtf = FileResource(bundle: _R.hostingBundle, name: "PingFang-TC-Regular", pathExtension: "otf")
    /// Resource file `read_me.txt`.
    static let read_meTxt = FileResource(bundle: _R.hostingBundle, name: "read_me", pathExtension: "txt")
    /// Resource file `ReleaseNotes.txt`.
    static let releaseNotesTxt = FileResource(bundle: _R.hostingBundle, name: "ReleaseNotes", pathExtension: "txt")
    /// Resource file `SF-UI-Display-Semibold.otf`.
    static let sFUIDisplaySemiboldOtf = FileResource(bundle: _R.hostingBundle, name: "SF-UI-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-UI-Text-Semibold.otf`.
    static let sFUITextSemiboldOtf = FileResource(bundle: _R.hostingBundle, name: "SF-UI-Text-Semibold", pathExtension: "otf")
    /// Resource file `SanFrancisco_Medium.ttf`.
    static let sanFrancisco_MediumTtf = FileResource(bundle: _R.hostingBundle, name: "SanFrancisco_Medium", pathExtension: "ttf")
    /// Resource file `ShareSDK.bundle`.
    static let shareSDKBundle = FileResource(bundle: _R.hostingBundle, name: "ShareSDK", pathExtension: "bundle")
    /// Resource file `ShareSDKUI.bundle`.
    static let shareSDKUIBundle = FileResource(bundle: _R.hostingBundle, name: "ShareSDKUI", pathExtension: "bundle")
    /// Resource file `TencentOpenApi_IOS_Bundle.bundle`.
    static let tencentOpenApi_IOS_BundleBundle = FileResource(bundle: _R.hostingBundle, name: "TencentOpenApi_IOS_Bundle", pathExtension: "bundle")
    /// Resource file `TuSDK.bundle`.
    static let tuSDKBundle = FileResource(bundle: _R.hostingBundle, name: "TuSDK", pathExtension: "bundle")
    /// Resource file `VertexShader.glsl`.
    static let vertexShaderGlsl = FileResource(bundle: _R.hostingBundle, name: "VertexShader", pathExtension: "glsl")
    /// Resource file `WeiboSDK.bundle`.
    static let weiboSDKBundle = FileResource(bundle: _R.hostingBundle, name: "WeiboSDK", pathExtension: "bundle")
    
    /// `bundle.URLForResource("FragmentShader", withExtension: "glsl")`
    static func fragmentShaderGlsl(_: Void) -> NSURL? {
      let fileResource = R.file.fragmentShaderGlsl
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("PingFang-TC-Medium", withExtension: "otf")`
    static func pingFangTCMediumOtf(_: Void) -> NSURL? {
      let fileResource = R.file.pingFangTCMediumOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("PingFang-TC-Regular", withExtension: "otf")`
    static func pingFangTCRegularOtf(_: Void) -> NSURL? {
      let fileResource = R.file.pingFangTCRegularOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("read_me", withExtension: "txt")`
    static func read_meTxt(_: Void) -> NSURL? {
      let fileResource = R.file.read_meTxt
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("ReleaseNotes", withExtension: "txt")`
    static func releaseNotesTxt(_: Void) -> NSURL? {
      let fileResource = R.file.releaseNotesTxt
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("SF-UI-Display-Semibold", withExtension: "otf")`
    static func sFUIDisplaySemiboldOtf(_: Void) -> NSURL? {
      let fileResource = R.file.sFUIDisplaySemiboldOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("SF-UI-Text-Semibold", withExtension: "otf")`
    static func sFUITextSemiboldOtf(_: Void) -> NSURL? {
      let fileResource = R.file.sFUITextSemiboldOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("SanFrancisco_Medium", withExtension: "ttf")`
    static func sanFrancisco_MediumTtf(_: Void) -> NSURL? {
      let fileResource = R.file.sanFrancisco_MediumTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("ShareSDK", withExtension: "bundle")`
    static func shareSDKBundle(_: Void) -> NSURL? {
      let fileResource = R.file.shareSDKBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("ShareSDKUI", withExtension: "bundle")`
    static func shareSDKUIBundle(_: Void) -> NSURL? {
      let fileResource = R.file.shareSDKUIBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("TencentOpenApi_IOS_Bundle", withExtension: "bundle")`
    static func tencentOpenApi_IOS_BundleBundle(_: Void) -> NSURL? {
      let fileResource = R.file.tencentOpenApi_IOS_BundleBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("TuSDK", withExtension: "bundle")`
    static func tuSDKBundle(_: Void) -> NSURL? {
      let fileResource = R.file.tuSDKBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("VertexShader", withExtension: "glsl")`
    static func vertexShaderGlsl(_: Void) -> NSURL? {
      let fileResource = R.file.vertexShaderGlsl
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("WeiboSDK", withExtension: "bundle")`
    static func weiboSDKBundle(_: Void) -> NSURL? {
      let fileResource = R.file.weiboSDKBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font {
    /// Font `.HelveticaNeueDeskInterface-MediumP4`.
    static let helveticaNeueDeskInterfaceMediumP4 = FontResource(fontName: ".HelveticaNeueDeskInterface-MediumP4")
    /// Font `PingFang-TC-Medium`.
    static let pingFangTCMedium = FontResource(fontName: "PingFang-TC-Medium")
    /// Font `PingFang-TC-Regular`.
    static let pingFangTCRegular = FontResource(fontName: "PingFang-TC-Regular")
    /// Font `SFUIDisplay-Semibold`.
    static let sFUIDisplaySemibold = FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIText-Semibold`.
    static let sFUITextSemibold = FontResource(fontName: "SFUIText-Semibold")
    
    /// `UIFont(name: ".HelveticaNeueDeskInterface-MediumP4", size: ...)`
    static func helveticaNeueDeskInterfaceMediumP4(size size: CGFloat) -> UIFont? {
      return UIFont(resource: helveticaNeueDeskInterfaceMediumP4, size: size)
    }
    
    /// `UIFont(name: "PingFang-TC-Medium", size: ...)`
    static func pingFangTCMedium(size size: CGFloat) -> UIFont? {
      return UIFont(resource: pingFangTCMedium, size: size)
    }
    
    /// `UIFont(name: "PingFang-TC-Regular", size: ...)`
    static func pingFangTCRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: pingFangTCRegular, size: size)
    }
    
    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sFUIDisplaySemibold(size size: CGFloat) -> UIFont? {
      return UIFont(resource: sFUIDisplaySemibold, size: size)
    }
    
    /// `UIFont(name: "SFUIText-Semibold", size: ...)`
    static func sFUITextSemibold(size size: CGFloat) -> UIFont? {
      return UIFont(resource: sFUITextSemibold, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 141 images.
  struct image {
    /// Image `APP`.
    static let aPP = ImageResource(bundle: _R.hostingBundle, name: "APP")
    /// Image `Arrow`.
    static let arrow = ImageResource(bundle: _R.hostingBundle, name: "Arrow")
    /// Image `bg_TabBar`.
    static let bg_TabBar = ImageResource(bundle: _R.hostingBundle, name: "bg_TabBar")
    /// Image `bg_gradien_mask`.
    static let bg_gradien_mask = ImageResource(bundle: _R.hostingBundle, name: "bg_gradien_mask")
    /// Image `bg_text_bubbles_triangle`.
    static let bg_text_bubbles_triangle = ImageResource(bundle: _R.hostingBundle, name: "bg_text_bubbles_triangle")
    /// Image `Brand Assets`.
    static let brandAssets = ImageResource(bundle: _R.hostingBundle, name: "Brand Assets")
    /// Image `btn_check`.
    static let btn_check = ImageResource(bundle: _R.hostingBundle, name: "btn_check")
    /// Image `btn_closeRecord`.
    static let btn_closeRecord = ImageResource(bundle: _R.hostingBundle, name: "btn_closeRecord")
    /// Image `btn_closeRecording`.
    static let btn_closeRecording = ImageResource(bundle: _R.hostingBundle, name: "btn_closeRecording")
    /// Image `btn_close_photo`.
    static let btn_close_photo = ImageResource(bundle: _R.hostingBundle, name: "btn_close_photo")
    /// Image `btn_delete`.
    static let btn_delete = ImageResource(bundle: _R.hostingBundle, name: "btn_delete")
    /// Image `btn_inputClose`.
    static let btn_inputClose = ImageResource(bundle: _R.hostingBundle, name: "btn_inputClose")
    /// Image `btn_photo`.
    static let btn_photo = ImageResource(bundle: _R.hostingBundle, name: "btn_photo")
    /// Image `btn_play`.
    static let btn_play = ImageResource(bundle: _R.hostingBundle, name: "btn_play")
    /// Image `btn_play2`.
    static let btn_play2 = ImageResource(bundle: _R.hostingBundle, name: "btn_play2")
    /// Image `btn_recording`.
    static let btn_recording = ImageResource(bundle: _R.hostingBundle, name: "btn_recording")
    /// Image `btn_recordingStop`.
    static let btn_recordingStop = ImageResource(bundle: _R.hostingBundle, name: "btn_recordingStop")
    /// Image `Camera`.
    static let camera = ImageResource(bundle: _R.hostingBundle, name: "Camera")
    /// Image `CameraLens`.
    static let cameraLens = ImageResource(bundle: _R.hostingBundle, name: "CameraLens")
    /// Image `Configuration_Monitor`.
    static let configuration_Monitor = ImageResource(bundle: _R.hostingBundle, name: "Configuration_Monitor")
    /// Image `Configuration_Power-icon`.
    static let configuration_PowerIcon = ImageResource(bundle: _R.hostingBundle, name: "Configuration_Power-icon")
    /// Image `Configuration_line`.
    static let configuration_line = ImageResource(bundle: _R.hostingBundle, name: "Configuration_line")
    /// Image `Configuration_one`.
    static let configuration_one = ImageResource(bundle: _R.hostingBundle, name: "Configuration_one")
    /// Image `Configuration_oneone`.
    static let configuration_oneone = ImageResource(bundle: _R.hostingBundle, name: "Configuration_oneone")
    /// Image `Configuration_two`.
    static let configuration_two = ImageResource(bundle: _R.hostingBundle, name: "Configuration_two")
    /// Image `Configuration_wifi`.
    static let configuration_wifi = ImageResource(bundle: _R.hostingBundle, name: "Configuration_wifi")
    /// Image `connection2_2Monitor`.
    static let connection2_2Monitor = ImageResource(bundle: _R.hostingBundle, name: "connection2_2Monitor")
    /// Image `connection2_2onw`.
    static let connection2_2onw = ImageResource(bundle: _R.hostingBundle, name: "connection2_2onw")
    /// Image `connection2_two`.
    static let connection2_two = ImageResource(bundle: _R.hostingBundle, name: "connection2_two")
    /// Image `connection_2onw`.
    static let connection_2onw = ImageResource(bundle: _R.hostingBundle, name: "connection_2onw")
    /// Image `connection_Hook-Hollow`.
    static let connection_HookHollow = ImageResource(bundle: _R.hostingBundle, name: "connection_Hook-Hollow")
    /// Image `connection_Monitor`.
    static let connection_Monitor = ImageResource(bundle: _R.hostingBundle, name: "connection_Monitor")
    /// Image `connection_Solid-hook`.
    static let connection_SolidHook = ImageResource(bundle: _R.hostingBundle, name: "connection_Solid-hook")
    /// Image `connection_line`.
    static let connection_line = ImageResource(bundle: _R.hostingBundle, name: "connection_line")
    /// Image `connection_two`.
    static let connection_two = ImageResource(bundle: _R.hostingBundle, name: "connection_two")
    /// Image `cursor`.
    static let cursor = ImageResource(bundle: _R.hostingBundle, name: "cursor")
    /// Image `DisclosureIndicator`.
    static let disclosureIndicator = ImageResource(bundle: _R.hostingBundle, name: "DisclosureIndicator")
    /// Image `editLeftThumb`.
    static let editLeftThumb = ImageResource(bundle: _R.hostingBundle, name: "editLeftThumb")
    /// Image `editRightThumb`.
    static let editRightThumb = ImageResource(bundle: _R.hostingBundle, name: "editRightThumb")
    /// Image `Home_logo`.
    static let home_logo = ImageResource(bundle: _R.hostingBundle, name: "Home_logo")
    /// Image `ic_Clipping`.
    static let ic_Clipping = ImageResource(bundle: _R.hostingBundle, name: "ic_Clipping")
    /// Image `ic_ConnectFailure`.
    static let ic_ConnectFailure = ImageResource(bundle: _R.hostingBundle, name: "ic_ConnectFailure")
    /// Image `ic_ConnectSuccess`.
    static let ic_ConnectSuccess = ImageResource(bundle: _R.hostingBundle, name: "ic_ConnectSuccess")
    /// Image `ic_ConnectWifi`.
    static let ic_ConnectWifi = ImageResource(bundle: _R.hostingBundle, name: "ic_ConnectWifi")
    /// Image `ic_ErrorMessageNavDot`.
    static let ic_ErrorMessageNavDot = ImageResource(bundle: _R.hostingBundle, name: "ic_ErrorMessageNavDot")
    /// Image `ic_ErrorMessageNavDotH`.
    static let ic_ErrorMessageNavDotH = ImageResource(bundle: _R.hostingBundle, name: "ic_ErrorMessageNavDotH")
    /// Image `ic_Filters`.
    static let ic_Filters = ImageResource(bundle: _R.hostingBundle, name: "ic_Filters")
    /// Image `ic_Montage`.
    static let ic_Montage = ImageResource(bundle: _R.hostingBundle, name: "ic_Montage")
    /// Image `ic_NavBarClose`.
    static let ic_NavBarClose = ImageResource(bundle: _R.hostingBundle, name: "ic_NavBarClose")
    /// Image `ic_StepFailure`.
    static let ic_StepFailure = ImageResource(bundle: _R.hostingBundle, name: "ic_StepFailure")
    /// Image `ic_StepOne`.
    static let ic_StepOne = ImageResource(bundle: _R.hostingBundle, name: "ic_StepOne")
    /// Image `ic_StepOneH`.
    static let ic_StepOneH = ImageResource(bundle: _R.hostingBundle, name: "ic_StepOneH")
    /// Image `ic_StepSuccess`.
    static let ic_StepSuccess = ImageResource(bundle: _R.hostingBundle, name: "ic_StepSuccess")
    /// Image `ic_StepThree`.
    static let ic_StepThree = ImageResource(bundle: _R.hostingBundle, name: "ic_StepThree")
    /// Image `ic_StepThreeH`.
    static let ic_StepThreeH = ImageResource(bundle: _R.hostingBundle, name: "ic_StepThreeH")
    /// Image `ic_StepTwo`.
    static let ic_StepTwo = ImageResource(bundle: _R.hostingBundle, name: "ic_StepTwo")
    /// Image `ic_StepTwoH`.
    static let ic_StepTwoH = ImageResource(bundle: _R.hostingBundle, name: "ic_StepTwoH")
    /// Image `ic_account`.
    static let ic_account = ImageResource(bundle: _R.hostingBundle, name: "ic_account")
    /// Image `ic_back`.
    static let ic_back = ImageResource(bundle: _R.hostingBundle, name: "ic_back")
    /// Image `ic_camera`.
    static let ic_camera = ImageResource(bundle: _R.hostingBundle, name: "ic_camera")
    /// Image `ic_checkbox`.
    static let ic_checkbox = ImageResource(bundle: _R.hostingBundle, name: "ic_checkbox")
    /// Image `ic_checkboxSelect`.
    static let ic_checkboxSelect = ImageResource(bundle: _R.hostingBundle, name: "ic_checkboxSelect")
    /// Image `ic_delete`.
    static let ic_delete = ImageResource(bundle: _R.hostingBundle, name: "ic_delete")
    /// Image `ic_folder`.
    static let ic_folder = ImageResource(bundle: _R.hostingBundle, name: "ic_folder")
    /// Image `ic_fullscreen`.
    static let ic_fullscreen = ImageResource(bundle: _R.hostingBundle, name: "ic_fullscreen")
    /// Image `ic_inputError`.
    static let ic_inputError = ImageResource(bundle: _R.hostingBundle, name: "ic_inputError")
    /// Image `ic_menu`.
    static let ic_menu = ImageResource(bundle: _R.hostingBundle, name: "ic_menu")
    /// Image `ic_modeCare`.
    static let ic_modeCare = ImageResource(bundle: _R.hostingBundle, name: "ic_modeCare")
    /// Image `ic_modeNodisturb`.
    static let ic_modeNodisturb = ImageResource(bundle: _R.hostingBundle, name: "ic_modeNodisturb")
    /// Image `ic_more_down`.
    static let ic_more_down = ImageResource(bundle: _R.hostingBundle, name: "ic_more_down")
    /// Image `ic_more_up`.
    static let ic_more_up = ImageResource(bundle: _R.hostingBundle, name: "ic_more_up")
    /// Image `ic_music`.
    static let ic_music = ImageResource(bundle: _R.hostingBundle, name: "ic_music")
    /// Image `ic_musicSelect`.
    static let ic_musicSelect = ImageResource(bundle: _R.hostingBundle, name: "ic_musicSelect")
    /// Image `ic_noiseH`.
    static let ic_noiseH = ImageResource(bundle: _R.hostingBundle, name: "ic_noiseH")
    /// Image `ic_noiseL`.
    static let ic_noiseL = ImageResource(bundle: _R.hostingBundle, name: "ic_noiseL")
    /// Image `ic_noiseM`.
    static let ic_noiseM = ImageResource(bundle: _R.hostingBundle, name: "ic_noiseM")
    /// Image `ic_play`.
    static let ic_play = ImageResource(bundle: _R.hostingBundle, name: "ic_play")
    /// Image `ic_record`.
    static let ic_record = ImageResource(bundle: _R.hostingBundle, name: "ic_record")
    /// Image `ic_record2`.
    static let ic_record2 = ImageResource(bundle: _R.hostingBundle, name: "ic_record2")
    /// Image `ic_recordSelect`.
    static let ic_recordSelect = ImageResource(bundle: _R.hostingBundle, name: "ic_recordSelect")
    /// Image `ic_record_time`.
    static let ic_record_time = ImageResource(bundle: _R.hostingBundle, name: "ic_record_time")
    /// Image `ic_recording`.
    static let ic_recording = ImageResource(bundle: _R.hostingBundle, name: "ic_recording")
    /// Image `ic_recording_dot`.
    static let ic_recording_dot = ImageResource(bundle: _R.hostingBundle, name: "ic_recording_dot")
    /// Image `ic_screenshot`.
    static let ic_screenshot = ImageResource(bundle: _R.hostingBundle, name: "ic_screenshot")
    /// Image `ic_screenshot2`.
    static let ic_screenshot2 = ImageResource(bundle: _R.hostingBundle, name: "ic_screenshot2")
    /// Image `ic_screenshotSelect`.
    static let ic_screenshotSelect = ImageResource(bundle: _R.hostingBundle, name: "ic_screenshotSelect")
    /// Image `ic_select`.
    static let ic_select = ImageResource(bundle: _R.hostingBundle, name: "ic_select")
    /// Image `ic_setting`.
    static let ic_setting = ImageResource(bundle: _R.hostingBundle, name: "ic_setting")
    /// Image `ic_share`.
    static let ic_share = ImageResource(bundle: _R.hostingBundle, name: "ic_share")
    /// Image `ic_signout`.
    static let ic_signout = ImageResource(bundle: _R.hostingBundle, name: "ic_signout")
    /// Image `ic_stepDot`.
    static let ic_stepDot = ImageResource(bundle: _R.hostingBundle, name: "ic_stepDot")
    /// Image `ic_suspend`.
    static let ic_suspend = ImageResource(bundle: _R.hostingBundle, name: "ic_suspend")
    /// Image `ic_temH`.
    static let ic_temH = ImageResource(bundle: _R.hostingBundle, name: "ic_temH")
    /// Image `ic_temL`.
    static let ic_temL = ImageResource(bundle: _R.hostingBundle, name: "ic_temL")
    /// Image `ic_temM`.
    static let ic_temM = ImageResource(bundle: _R.hostingBundle, name: "ic_temM")
    /// Image `ic_timemachine`.
    static let ic_timemachine = ImageResource(bundle: _R.hostingBundle, name: "ic_timemachine")
    /// Image `ic_timer`.
    static let ic_timer = ImageResource(bundle: _R.hostingBundle, name: "ic_timer")
    /// Image `ic_timerBackstage`.
    static let ic_timerBackstage = ImageResource(bundle: _R.hostingBundle, name: "ic_timerBackstage")
    /// Image `ic_timerPointer`.
    static let ic_timerPointer = ImageResource(bundle: _R.hostingBundle, name: "ic_timerPointer")
    /// Image `ic_timerSelect`.
    static let ic_timerSelect = ImageResource(bundle: _R.hostingBundle, name: "ic_timerSelect")
    /// Image `ic_unknow`.
    static let ic_unknow = ImageResource(bundle: _R.hostingBundle, name: "ic_unknow")
    /// Image `ic_user`.
    static let ic_user = ImageResource(bundle: _R.hostingBundle, name: "ic_user")
    /// Image `ic_voice`.
    static let ic_voice = ImageResource(bundle: _R.hostingBundle, name: "ic_voice")
    /// Image `ic_wechat`.
    static let ic_wechat = ImageResource(bundle: _R.hostingBundle, name: "ic_wechat")
    /// Image `ic_weibo`.
    static let ic_weibo = ImageResource(bundle: _R.hostingBundle, name: "ic_weibo")
    /// Image `img_ConnectCamera`.
    static let img_ConnectCamera = ImageResource(bundle: _R.hostingBundle, name: "img_ConnectCamera")
    /// Image `img_ConnectCamera1`.
    static let img_ConnectCamera1 = ImageResource(bundle: _R.hostingBundle, name: "img_ConnectCamera1")
    /// Image `img_ConnectCamera2`.
    static let img_ConnectCamera2 = ImageResource(bundle: _R.hostingBundle, name: "img_ConnectCamera2")
    /// Image `img_ConnectCamera3`.
    static let img_ConnectCamera3 = ImageResource(bundle: _R.hostingBundle, name: "img_ConnectCamera3")
    /// Image `img_DeviceCharging`.
    static let img_DeviceCharging = ImageResource(bundle: _R.hostingBundle, name: "img_DeviceCharging")
    /// Image `img_ErrorMessage1`.
    static let img_ErrorMessage1 = ImageResource(bundle: _R.hostingBundle, name: "img_ErrorMessage1")
    /// Image `img_ErrorMessage2`.
    static let img_ErrorMessage2 = ImageResource(bundle: _R.hostingBundle, name: "img_ErrorMessage2")
    /// Image `img_camera`.
    static let img_camera = ImageResource(bundle: _R.hostingBundle, name: "img_camera")
    /// Image `img_dial`.
    static let img_dial = ImageResource(bundle: _R.hostingBundle, name: "img_dial")
    /// Image `img_logo`.
    static let img_logo = ImageResource(bundle: _R.hostingBundle, name: "img_logo")
    /// Image `img_logoAbout`.
    static let img_logoAbout = ImageResource(bundle: _R.hostingBundle, name: "img_logoAbout")
    /// Image `img_logoWhite`.
    static let img_logoWhite = ImageResource(bundle: _R.hostingBundle, name: "img_logoWhite")
    /// Image `img_photowall`.
    static let img_photowall = ImageResource(bundle: _R.hostingBundle, name: "img_photowall")
    /// Image `img_triangleBomb`.
    static let img_triangleBomb = ImageResource(bundle: _R.hostingBundle, name: "img_triangleBomb")
    /// Image `img_user`.
    static let img_user = ImageResource(bundle: _R.hostingBundle, name: "img_user")
    /// Image `LaunchImage`.
    static let launchImage = ImageResource(bundle: _R.hostingBundle, name: "LaunchImage")
    /// Image `line`.
    static let line = ImageResource(bundle: _R.hostingBundle, name: "line")
    /// Image `log in_logo`.
    static let logIn_logo = ImageResource(bundle: _R.hostingBundle, name: "log in_logo")
    /// Image `Login box-2`.
    static let loginBox2 = ImageResource(bundle: _R.hostingBundle, name: "Login box-2")
    /// Image `password_wifi`.
    static let password_wifi = ImageResource(bundle: _R.hostingBundle, name: "password_wifi")
    /// Image `Photo`.
    static let photo = ImageResource(bundle: _R.hostingBundle, name: "Photo")
    /// Image `progressBackground`.
    static let progressBackground = ImageResource(bundle: _R.hostingBundle, name: "progressBackground")
    /// Image `radioCheck`.
    static let radioCheck = ImageResource(bundle: _R.hostingBundle, name: "radioCheck")
    /// Image `radioNone`.
    static let radioNone = ImageResource(bundle: _R.hostingBundle, name: "radioNone")
    /// Image `roundLayer`.
    static let roundLayer = ImageResource(bundle: _R.hostingBundle, name: "roundLayer")
    /// Image `Screenshot_Gradient`.
    static let screenshot_Gradient = ImageResource(bundle: _R.hostingBundle, name: "Screenshot_Gradient")
    /// Image `Setup_enter-password`.
    static let setup_enterPassword = ImageResource(bundle: _R.hostingBundle, name: "Setup_enter-password")
    /// Image `Setup_line`.
    static let setup_line = ImageResource(bundle: _R.hostingBundle, name: "Setup_line")
    /// Image `Success-icon-set`.
    static let successIconSet = ImageResource(bundle: _R.hostingBundle, name: "Success-icon-set")
    /// Image `triangle`.
    static let triangle = ImageResource(bundle: _R.hostingBundle, name: "triangle")
    /// Image `trimmerPause`.
    static let trimmerPause = ImageResource(bundle: _R.hostingBundle, name: "trimmerPause")
    /// Image `uneditLeftThumb`.
    static let uneditLeftThumb = ImageResource(bundle: _R.hostingBundle, name: "uneditLeftThumb")
    /// Image `uneditRightThumb`.
    static let uneditRightThumb = ImageResource(bundle: _R.hostingBundle, name: "uneditRightThumb")
    /// Image `Using clipping`.
    static let usingClipping = ImageResource(bundle: _R.hostingBundle, name: "Using clipping")
    /// Image `video_cursor`.
    static let video_cursor = ImageResource(bundle: _R.hostingBundle, name: "video_cursor")
    /// Image `百特佳超市`.
    static let 百特佳超市 = ImageResource(bundle: _R.hostingBundle, name: "百特佳超市")
    
    /// `UIImage(named: "APP", bundle: ..., traitCollection: ...)`
    static func aPP(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.aPP, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.arrow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bg_TabBar", bundle: ..., traitCollection: ...)`
    static func bg_TabBar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg_TabBar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bg_gradien_mask", bundle: ..., traitCollection: ...)`
    static func bg_gradien_mask(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg_gradien_mask, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bg_text_bubbles_triangle", bundle: ..., traitCollection: ...)`
    static func bg_text_bubbles_triangle(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg_text_bubbles_triangle, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Brand Assets", bundle: ..., traitCollection: ...)`
    static func brandAssets(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.brandAssets, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_check", bundle: ..., traitCollection: ...)`
    static func btn_check(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_check, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_closeRecord", bundle: ..., traitCollection: ...)`
    static func btn_closeRecord(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_closeRecord, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_closeRecording", bundle: ..., traitCollection: ...)`
    static func btn_closeRecording(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_closeRecording, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_close_photo", bundle: ..., traitCollection: ...)`
    static func btn_close_photo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_close_photo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete", bundle: ..., traitCollection: ...)`
    static func btn_delete(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_delete, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_inputClose", bundle: ..., traitCollection: ...)`
    static func btn_inputClose(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_inputClose, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_photo", bundle: ..., traitCollection: ...)`
    static func btn_photo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_photo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_play", bundle: ..., traitCollection: ...)`
    static func btn_play(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_play, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_play2", bundle: ..., traitCollection: ...)`
    static func btn_play2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_play2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_recording", bundle: ..., traitCollection: ...)`
    static func btn_recording(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_recording, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_recordingStop", bundle: ..., traitCollection: ...)`
    static func btn_recordingStop(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_recordingStop, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.camera, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CameraLens", bundle: ..., traitCollection: ...)`
    static func cameraLens(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cameraLens, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_Monitor", bundle: ..., traitCollection: ...)`
    static func configuration_Monitor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_Monitor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_Power-icon", bundle: ..., traitCollection: ...)`
    static func configuration_PowerIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_PowerIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_line", bundle: ..., traitCollection: ...)`
    static func configuration_line(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_line, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_one", bundle: ..., traitCollection: ...)`
    static func configuration_one(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_one, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_oneone", bundle: ..., traitCollection: ...)`
    static func configuration_oneone(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_oneone, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_two", bundle: ..., traitCollection: ...)`
    static func configuration_two(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_two, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Configuration_wifi", bundle: ..., traitCollection: ...)`
    static func configuration_wifi(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.configuration_wifi, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection2_2Monitor", bundle: ..., traitCollection: ...)`
    static func connection2_2Monitor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection2_2Monitor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection2_2onw", bundle: ..., traitCollection: ...)`
    static func connection2_2onw(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection2_2onw, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection2_two", bundle: ..., traitCollection: ...)`
    static func connection2_two(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection2_two, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection_2onw", bundle: ..., traitCollection: ...)`
    static func connection_2onw(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection_2onw, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection_Hook-Hollow", bundle: ..., traitCollection: ...)`
    static func connection_HookHollow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection_HookHollow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection_Monitor", bundle: ..., traitCollection: ...)`
    static func connection_Monitor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection_Monitor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection_Solid-hook", bundle: ..., traitCollection: ...)`
    static func connection_SolidHook(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection_SolidHook, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection_line", bundle: ..., traitCollection: ...)`
    static func connection_line(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection_line, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "connection_two", bundle: ..., traitCollection: ...)`
    static func connection_two(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.connection_two, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cursor", bundle: ..., traitCollection: ...)`
    static func cursor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cursor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "DisclosureIndicator", bundle: ..., traitCollection: ...)`
    static func disclosureIndicator(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.disclosureIndicator, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "editLeftThumb", bundle: ..., traitCollection: ...)`
    static func editLeftThumb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.editLeftThumb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "editRightThumb", bundle: ..., traitCollection: ...)`
    static func editRightThumb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.editRightThumb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Home_logo", bundle: ..., traitCollection: ...)`
    static func home_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.home_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_Clipping", bundle: ..., traitCollection: ...)`
    static func ic_Clipping(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_Clipping, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_ConnectFailure", bundle: ..., traitCollection: ...)`
    static func ic_ConnectFailure(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_ConnectFailure, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_ConnectSuccess", bundle: ..., traitCollection: ...)`
    static func ic_ConnectSuccess(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_ConnectSuccess, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_ConnectWifi", bundle: ..., traitCollection: ...)`
    static func ic_ConnectWifi(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_ConnectWifi, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_ErrorMessageNavDot", bundle: ..., traitCollection: ...)`
    static func ic_ErrorMessageNavDot(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_ErrorMessageNavDot, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_ErrorMessageNavDotH", bundle: ..., traitCollection: ...)`
    static func ic_ErrorMessageNavDotH(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_ErrorMessageNavDotH, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_Filters", bundle: ..., traitCollection: ...)`
    static func ic_Filters(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_Filters, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_Montage", bundle: ..., traitCollection: ...)`
    static func ic_Montage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_Montage, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_NavBarClose", bundle: ..., traitCollection: ...)`
    static func ic_NavBarClose(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_NavBarClose, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepFailure", bundle: ..., traitCollection: ...)`
    static func ic_StepFailure(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepFailure, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepOne", bundle: ..., traitCollection: ...)`
    static func ic_StepOne(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepOne, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepOneH", bundle: ..., traitCollection: ...)`
    static func ic_StepOneH(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepOneH, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepSuccess", bundle: ..., traitCollection: ...)`
    static func ic_StepSuccess(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepSuccess, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepThree", bundle: ..., traitCollection: ...)`
    static func ic_StepThree(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepThree, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepThreeH", bundle: ..., traitCollection: ...)`
    static func ic_StepThreeH(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepThreeH, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepTwo", bundle: ..., traitCollection: ...)`
    static func ic_StepTwo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepTwo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_StepTwoH", bundle: ..., traitCollection: ...)`
    static func ic_StepTwoH(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_StepTwoH, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_account", bundle: ..., traitCollection: ...)`
    static func ic_account(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_account, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_back, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_camera, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkbox", bundle: ..., traitCollection: ...)`
    static func ic_checkbox(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_checkbox, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkboxSelect", bundle: ..., traitCollection: ...)`
    static func ic_checkboxSelect(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_checkboxSelect, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_delete, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_folder", bundle: ..., traitCollection: ...)`
    static func ic_folder(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_folder, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_fullscreen", bundle: ..., traitCollection: ...)`
    static func ic_fullscreen(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_fullscreen, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_inputError", bundle: ..., traitCollection: ...)`
    static func ic_inputError(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_inputError, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
    static func ic_menu(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_menu, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_modeCare", bundle: ..., traitCollection: ...)`
    static func ic_modeCare(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_modeCare, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_modeNodisturb", bundle: ..., traitCollection: ...)`
    static func ic_modeNodisturb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_modeNodisturb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_more_down", bundle: ..., traitCollection: ...)`
    static func ic_more_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_more_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_more_up", bundle: ..., traitCollection: ...)`
    static func ic_more_up(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_more_up, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_music", bundle: ..., traitCollection: ...)`
    static func ic_music(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_music, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_musicSelect", bundle: ..., traitCollection: ...)`
    static func ic_musicSelect(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_musicSelect, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_noiseH", bundle: ..., traitCollection: ...)`
    static func ic_noiseH(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_noiseH, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_noiseL", bundle: ..., traitCollection: ...)`
    static func ic_noiseL(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_noiseL, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_noiseM", bundle: ..., traitCollection: ...)`
    static func ic_noiseM(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_noiseM, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_play", bundle: ..., traitCollection: ...)`
    static func ic_play(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_play, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_record", bundle: ..., traitCollection: ...)`
    static func ic_record(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_record, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_record2", bundle: ..., traitCollection: ...)`
    static func ic_record2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_record2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_recordSelect", bundle: ..., traitCollection: ...)`
    static func ic_recordSelect(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_recordSelect, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_record_time", bundle: ..., traitCollection: ...)`
    static func ic_record_time(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_record_time, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_recording", bundle: ..., traitCollection: ...)`
    static func ic_recording(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_recording, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_recording_dot", bundle: ..., traitCollection: ...)`
    static func ic_recording_dot(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_recording_dot, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_screenshot", bundle: ..., traitCollection: ...)`
    static func ic_screenshot(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_screenshot, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_screenshot2", bundle: ..., traitCollection: ...)`
    static func ic_screenshot2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_screenshot2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_screenshotSelect", bundle: ..., traitCollection: ...)`
    static func ic_screenshotSelect(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_screenshotSelect, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_select", bundle: ..., traitCollection: ...)`
    static func ic_select(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_select, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting", bundle: ..., traitCollection: ...)`
    static func ic_setting(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_setting, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_share, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_signout", bundle: ..., traitCollection: ...)`
    static func ic_signout(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_signout, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_stepDot", bundle: ..., traitCollection: ...)`
    static func ic_stepDot(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_stepDot, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_suspend", bundle: ..., traitCollection: ...)`
    static func ic_suspend(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_suspend, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_temH", bundle: ..., traitCollection: ...)`
    static func ic_temH(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_temH, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_temL", bundle: ..., traitCollection: ...)`
    static func ic_temL(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_temL, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_temM", bundle: ..., traitCollection: ...)`
    static func ic_temM(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_temM, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_timemachine", bundle: ..., traitCollection: ...)`
    static func ic_timemachine(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_timemachine, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_timer", bundle: ..., traitCollection: ...)`
    static func ic_timer(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_timer, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_timerBackstage", bundle: ..., traitCollection: ...)`
    static func ic_timerBackstage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_timerBackstage, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_timerPointer", bundle: ..., traitCollection: ...)`
    static func ic_timerPointer(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_timerPointer, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_timerSelect", bundle: ..., traitCollection: ...)`
    static func ic_timerSelect(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_timerSelect, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_unknow", bundle: ..., traitCollection: ...)`
    static func ic_unknow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_unknow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_user, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_voice", bundle: ..., traitCollection: ...)`
    static func ic_voice(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_voice, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_wechat", bundle: ..., traitCollection: ...)`
    static func ic_wechat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_wechat, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_weibo", bundle: ..., traitCollection: ...)`
    static func ic_weibo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_weibo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_ConnectCamera", bundle: ..., traitCollection: ...)`
    static func img_ConnectCamera(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_ConnectCamera, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_ConnectCamera1", bundle: ..., traitCollection: ...)`
    static func img_ConnectCamera1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_ConnectCamera1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_ConnectCamera2", bundle: ..., traitCollection: ...)`
    static func img_ConnectCamera2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_ConnectCamera2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_ConnectCamera3", bundle: ..., traitCollection: ...)`
    static func img_ConnectCamera3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_ConnectCamera3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_DeviceCharging", bundle: ..., traitCollection: ...)`
    static func img_DeviceCharging(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_DeviceCharging, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_ErrorMessage1", bundle: ..., traitCollection: ...)`
    static func img_ErrorMessage1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_ErrorMessage1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_ErrorMessage2", bundle: ..., traitCollection: ...)`
    static func img_ErrorMessage2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_ErrorMessage2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_camera", bundle: ..., traitCollection: ...)`
    static func img_camera(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_camera, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_dial", bundle: ..., traitCollection: ...)`
    static func img_dial(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_dial, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_logo", bundle: ..., traitCollection: ...)`
    static func img_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_logoAbout", bundle: ..., traitCollection: ...)`
    static func img_logoAbout(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_logoAbout, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_logoWhite", bundle: ..., traitCollection: ...)`
    static func img_logoWhite(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_logoWhite, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_photowall", bundle: ..., traitCollection: ...)`
    static func img_photowall(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_photowall, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_triangleBomb", bundle: ..., traitCollection: ...)`
    static func img_triangleBomb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_triangleBomb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img_user", bundle: ..., traitCollection: ...)`
    static func img_user(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img_user, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.launchImage, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.line, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "log in_logo", bundle: ..., traitCollection: ...)`
    static func logIn_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.logIn_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Login box-2", bundle: ..., traitCollection: ...)`
    static func loginBox2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loginBox2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "password_wifi", bundle: ..., traitCollection: ...)`
    static func password_wifi(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.password_wifi, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.photo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "progressBackground", bundle: ..., traitCollection: ...)`
    static func progressBackground(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.progressBackground, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "radioCheck", bundle: ..., traitCollection: ...)`
    static func radioCheck(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.radioCheck, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "radioNone", bundle: ..., traitCollection: ...)`
    static func radioNone(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.radioNone, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "roundLayer", bundle: ..., traitCollection: ...)`
    static func roundLayer(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.roundLayer, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Screenshot_Gradient", bundle: ..., traitCollection: ...)`
    static func screenshot_Gradient(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.screenshot_Gradient, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Setup_enter-password", bundle: ..., traitCollection: ...)`
    static func setup_enterPassword(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.setup_enterPassword, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Setup_line", bundle: ..., traitCollection: ...)`
    static func setup_line(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.setup_line, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Success-icon-set", bundle: ..., traitCollection: ...)`
    static func successIconSet(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.successIconSet, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "triangle", bundle: ..., traitCollection: ...)`
    static func triangle(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.triangle, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "trimmerPause", bundle: ..., traitCollection: ...)`
    static func trimmerPause(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.trimmerPause, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "uneditLeftThumb", bundle: ..., traitCollection: ...)`
    static func uneditLeftThumb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.uneditLeftThumb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "uneditRightThumb", bundle: ..., traitCollection: ...)`
    static func uneditRightThumb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.uneditRightThumb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Using clipping", bundle: ..., traitCollection: ...)`
    static func usingClipping(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.usingClipping, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "video_cursor", bundle: ..., traitCollection: ...)`
    static func video_cursor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.video_cursor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "百特佳超市", bundle: ..., traitCollection: ...)`
    static func 百特佳超市(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.百特佳超市, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `LUNLabelsView`.
    static let lUNLabelsView = _R.nib._LUNLabelsView()
    /// Nib `LUNStaticView`.
    static let lUNStaticView = _R.nib._LUNStaticView()
    
    /// `UINib(name: "LUNLabelsView", bundle: ...)`
    static func lUNLabelsView(_: Void) -> UINib {
      return UINib(resource: R.nib.lUNLabelsView)
    }
    
    /// `UINib(name: "LUNStaticView", bundle: ...)`
    static func lUNStaticView(_: Void) -> UINib {
      return UINib(resource: R.nib.lUNStaticView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: smilehome
      /// 
      /// Locales: en, zh-Hans
      static let cFBundleDisplayName = StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", locales: ["en", "zh-Hans"])
      
      /// en translation: smilehome
      /// 
      /// Locales: en, zh-Hans
      static func cFBundleDisplayName(_: Void) -> String {
        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", comment: "")
      }
      
      private init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      private init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 246 localization keys.
    struct localizable {
      /// en translation: 到时间%@了呀
      /// 
      /// Locales: en, zh-Hans
      static let alarm_arrive_msg = StringResource(key: "alarm_arrive_msg", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 时间到！
      /// 
      /// Locales: en, zh-Hans
      static let alarm_arrive_title = StringResource(key: "alarm_arrive_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 亮彩灯
      /// 
      /// Locales: en, zh-Hans
      static let alarm_light_colorlight = StringResource(key: "alarm_light_colorlight", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 该拍照了
      /// 
      /// Locales: en, zh-Hans
      static let alarm_month_start_text = StringResource(key: "alarm_month_start_text", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 该拍照了
      /// 
      /// Locales: en, zh-Hans
      static let alarm_month_start_title = StringResource(key: "alarm_month_start_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 吃药
      /// 
      /// Locales: en, zh-Hans
      static let alarm_opt_drug = StringResource(key: "alarm_opt_drug", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 喂食
      /// 
      /// Locales: en, zh-Hans
      static let alarm_opt_eat = StringResource(key: "alarm_opt_eat", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 其他
      /// 
      /// Locales: en, zh-Hans
      static let alarm_opt_other = StringResource(key: "alarm_opt_other", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 睡觉
      /// 
      /// Locales: en, zh-Hans
      static let alarm_opt_sleep = StringResource(key: "alarm_opt_sleep", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 暂停
      /// 
      /// Locales: en, zh-Hans
      static let alarm_pause = StringResource(key: "alarm_pause", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 播放音乐
      /// 
      /// Locales: en, zh-Hans
      static let alarm_play_music = StringResource(key: "alarm_play_music", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 继续
      /// 
      /// Locales: en, zh-Hans
      static let alarm_resume = StringResource(key: "alarm_resume", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 启动
      /// 
      /// Locales: en, zh-Hans
      static let alarm_start = StringResource(key: "alarm_start", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 停止
      /// 
      /// Locales: en, zh-Hans
      static let alarm_stop = StringResource(key: "alarm_stop", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 提醒我给宝贝喂奶^-^
      /// 
      /// Locales: en, zh-Hans
      static let alarm_text_placehold = StringResource(key: "alarm_text_placehold", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 选择提醒选项
      /// 
      /// Locales: en, zh-Hans
      static let alarm_title = StringResource(key: "alarm_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 男
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_boy = StringResource(key: "babyInformation_boy", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 生日
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_brithday = StringResource(key: "babyInformation_brithday", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 女
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_girl = StringResource(key: "babyInformation_girl", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 填写宝贝信息,帮助我们正确记录宝贝成长记录。
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_introdution = StringResource(key: "babyInformation_introdution", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: zh
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_local = StringResource(key: "babyInformation_local", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 保存失败,请重试
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_save_failure = StringResource(key: "babyInformation_save_failure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 保存成功
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_save_success = StringResource(key: "babyInformation_save_success", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 性别
      /// 
      /// Locales: en, zh-Hans
      static let babyInformation_sex = StringResource(key: "babyInformation_sex", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 出现错误
      /// 
      /// Locales: en, zh-Hans
      static let background_error_title = StringResource(key: "background_error_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 绑定
      /// 
      /// Locales: en, zh-Hans
      static let bind = StringResource(key: "bind", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接失败
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_connect_failed = StringResource(key: "camera_connect_connect_failed", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重置设备
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_connect_reset = StringResource(key: "camera_connect_connect_reset", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重新尝试
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_connect_retry = StringResource(key: "camera_connect_connect_retry", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接失败
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_connect_failed = StringResource(key: "camera_connect_error_connect_failed", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 知道了
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_ensure = StringResource(key: "camera_connect_error_ensure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重试
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_retry = StringResource(key: "camera_connect_error_retry", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接超时
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_timeout = StringResource(key: "camera_connect_error_timeout", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 未知设备
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_unknown_device = StringResource(key: "camera_connect_error_unknown_device", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设备不支持
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_unsupported = StringResource(key: "camera_connect_error_unsupported", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 密码错误
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_error_wrong_passwd = StringResource(key: "camera_connect_error_wrong_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接超时
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_timeout = StringResource(key: "camera_connect_timeout", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 未知设备
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_unknow_device = StringResource(key: "camera_connect_unknow_device", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设备不支持
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_unsupported = StringResource(key: "camera_connect_unsupported", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设备密码错误
      /// 
      /// Locales: en, zh-Hans
      static let camera_connect_wrong_password = StringResource(key: "camera_connect_wrong_password", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 视频连接中……
      /// 
      /// Locales: en, zh-Hans
      static let camera_no_start = StringResource(key: "camera_no_start", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 看护模式
      /// 
      /// Locales: en, zh-Hans
      static let camera_option_care = StringResource(key: "camera_option_care", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 勿扰模式
      /// 
      /// Locales: en, zh-Hans
      static let camera_option_quiet = StringResource(key: "camera_option_quiet", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 摄像头开关
      /// 
      /// Locales: en, zh-Hans
      static let camera_option_switch = StringResource(key: "camera_option_switch", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 取消
      /// 
      /// Locales: en, zh-Hans
      static let cancel = StringResource(key: "Cancel", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请输入当前Wi-Fi密码，点击加入开始连续设备
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step0_descript = StringResource(key: "cfg_connect_step0_descript", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step0_title = StringResource(key: "cfg_connect_step0_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step0_wifi_passwd = StringResource(key: "cfg_connect_step0_wifi_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: Wifi密码不能为空！
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step0_wifi_passwd_err = StringResource(key: "cfg_connect_step0_wifi_passwd_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入错误
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step0_wifi_passwd_err_title = StringResource(key: "cfg_connect_step0_wifi_passwd_err_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: Wifi密码不能少于8位！
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step0_wifi_passwd_too_short = StringResource(key: "cfg_connect_step0_wifi_passwd_too_short", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 正在连接……
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step1_connecting = StringResource(key: "cfg_connect_step1_connecting", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请耐心等待，已连接%@
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step1_has_connect = StringResource(key: "cfg_connect_step1_has_connect", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 正在连接
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step1_title = StringResource(key: "cfg_connect_step1_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 1 输入错误的WiFi密码； 2 当前的网络环境较差。
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step2_connect_content_fail = StringResource(key: "cfg_connect_step2_connect_content_fail", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 马上进入监控画面%@
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step2_connect_content_success = StringResource(key: "cfg_connect_step2_connect_content_success", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接失败的原因可能是：
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step2_connect_status_fail = StringResource(key: "cfg_connect_step2_connect_status_fail", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接成功
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step2_connect_status_success = StringResource(key: "cfg_connect_step2_connect_status_success", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接失败
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step2_fail_title = StringResource(key: "cfg_connect_step2_fail_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接成功
      /// 
      /// Locales: en, zh-Hans
      static let cfg_connect_step2_success_title = StringResource(key: "cfg_connect_step2_success_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 连接Wifi
      /// 
      /// Locales: en, zh-Hans
      static let cfg_descript0 = StringResource(key: "cfg_descript0", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 接通电源,确保通电状态
      /// 
      /// Locales: en, zh-Hans
      static let cfg_descript1 = StringResource(key: "cfg_descript1", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请输入设备密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_dev_passwd_ipt = StringResource(key: "cfg_dev_passwd_ipt", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入设备密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_dev_passwd_title = StringResource(key: "cfg_dev_passwd_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 密码错误
      /// 
      /// Locales: en, zh-Hans
      static let cfg_dev_wifi_passwd_error = StringResource(key: "cfg_dev_wifi_passwd_error", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请输入WiFi密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_dev_wifi_passwd_ipt = StringResource(key: "cfg_dev_wifi_passwd_ipt", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入WiFi密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_dev_wifi_passwd_ipt_title = StringResource(key: "cfg_dev_wifi_passwd_ipt_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确定
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_ensure = StringResource(key: "cfg_modify_device_ensure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重试
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_error_retry = StringResource(key: "cfg_modify_device_error_retry", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 原密码错误
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_error_title = StringResource(key: "cfg_modify_device_error_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_passwd_new_passwd = StringResource(key: "cfg_modify_device_passwd_new_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确认密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_passwd_new_passwd_confirm = StringResource(key: "cfg_modify_device_passwd_new_passwd_confirm", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 原密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_passwd_old_passwd = StringResource(key: "cfg_modify_device_passwd_old_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 修改设备密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_modify_device_title = StringResource(key: "cfg_modify_device_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 下一步
      /// 
      /// Locales: en, zh-Hans
      static let cfg_nextStep = StringResource(key: "cfg_nextStep", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 加入
      /// 
      /// Locales: en, zh-Hans
      static let cfg_right_text = StringResource(key: "cfg_right_text", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 开始
      /// 
      /// Locales: en, zh-Hans
      static let cfg_start = StringResource(key: "cfg_start", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注册账户
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_continue_register = StringResource(key: "cfg_step3_continue_register", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 不注册使用会影响到某些功能的使用 建议注册！
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_continue_title = StringResource(key: "cfg_step3_continue_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 继续使用
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_continue_use = StringResource(key: "cfg_step3_continue_use", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注册账户
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_register = StringResource(key: "cfg_step3_register", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重试
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_retry = StringResource(key: "cfg_step3_retry", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: Wifi密码错误，重新输入正确的密码
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_retry_err_msg_one = StringResource(key: "cfg_step3_retry_err_msg_one", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 当前的网络环境较差，重新连接网络 尝试手机靠近监视器一点
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_retry_err_msg_two = StringResource(key: "cfg_step3_retry_err_msg_two", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 开始使用
      /// 
      /// Locales: en, zh-Hans
      static let cfg_step3_use = StringResource(key: "cfg_step3_use", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 配置设备
      /// 
      /// Locales: en, zh-Hans
      static let cfg_title = StringResource(key: "cfg_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 是否跳转到Wi-Fi设置界面？
      /// 
      /// Locales: en, zh-Hans
      static let cfg_wifi_jump_connect = StringResource(key: "cfg_wifi_jump_connect", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 两次输入的新密码不一致!
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_different = StringResource(key: "changePassWord_different", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 密码修改失败,请重试!
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_failure = StringResource(key: "changePassWord_failure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 新密码
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_newPassWord = StringResource(key: "changePassWord_newPassWord", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 原密码
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_originPassWord = StringResource(key: "changePassWord_originPassWord", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 原密码错误!
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_originPassWordWrong = StringResource(key: "changePassWord_originPassWordWrong", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 密码修改成功!
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_success = StringResource(key: "changePassWord_success", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确认新密码
      /// 
      /// Locales: en, zh-Hans
      static let changePassWord_sureNewPassWord = StringResource(key: "changePassWord_sureNewPassWord", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 编辑
      /// 
      /// Locales: en, zh-Hans
      static let edit = StringResource(key: "edit", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入错误
      /// 
      /// Locales: en, zh-Hans
      static let error_userid_input = StringResource(key: "error_userid_input", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 事件：
      /// 
      /// Locales: en, zh-Hans
      static let event_time_event = StringResource(key: "event_time_event", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 时间：
      /// 
      /// Locales: en, zh-Hans
      static let event_time_label = StringResource(key: "event_time_label", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 操作失败
      /// 
      /// Locales: en, zh-Hans
      static let failureBound = StringResource(key: "Failure bound", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 反馈失败,请稍后再试
      /// 
      /// Locales: en, zh-Hans
      static let feedbackFailure = StringResource(key: "feedbackFailure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 感谢你的反馈,请写下你的问题或意见
      /// 
      /// Locales: en, zh-Hans
      static let feedbackPlaceholder = StringResource(key: "feedbackPlaceholder", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 感谢你的反馈
      /// 
      /// Locales: en, zh-Hans
      static let feedbackSuccess = StringResource(key: "feedbackSuccess", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 验证码
      /// 
      /// Locales: en, zh-Hans
      static let find_checkCodeIpt = StringResource(key: "find_checkCodeIpt", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 找回失败
      /// 
      /// Locales: en, zh-Hans
      static let find_err_title = StringResource(key: "find_err_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 完成
      /// 
      /// Locales: en, zh-Hans
      static let find_finish = StringResource(key: "find_finish", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 获取验证码
      /// 
      /// Locales: en, zh-Hans
      static let find_getCheckCode = StringResource(key: "find_getCheckCode", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 已经有账号了？登陆
      /// 
      /// Locales: en, zh-Hans
      static let find_login = StringResource(key: "find_login", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 下一步
      /// 
      /// Locales: en, zh-Hans
      static let find_nextStep = StringResource(key: "find_nextStep", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设置密码
      /// 
      /// Locales: en, zh-Hans
      static let find_passwd = StringResource(key: "find_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确认密码
      /// 
      /// Locales: en, zh-Hans
      static let find_passwdConfirm = StringResource(key: "find_passwdConfirm", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 验证码错误
      /// 
      /// Locales: en, zh-Hans
      static let find_submit_checkcode_err = StringResource(key: "find_submit_checkcode_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: Successfully!
      /// 
      /// Locales: en, zh-Hans
      static let find_suceess_title = StringResource(key: "find_suceess_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 找回密码
      /// 
      /// Locales: en, zh-Hans
      static let find_title = StringResource(key: "find_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static let find_userid = StringResource(key: "find_userid", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 计时
      /// 
      /// Locales: en, zh-Hans
      static let func_count_time = StringResource(key: "func_count_time", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 音乐
      /// 
      /// Locales: en, zh-Hans
      static let func_music = StringResource(key: "func_music", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 录像
      /// 
      /// Locales: en, zh-Hans
      static let func_record = StringResource(key: "func_record", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 截屏
      /// 
      /// Locales: en, zh-Hans
      static let func_screen_shot = StringResource(key: "func_screen_shot", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 获取验证码
      /// 
      /// Locales: en, zh-Hans
      static let getIdentityCode = StringResource(key: "get identity code", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 立即进入
      /// 
      /// Locales: en, zh-Hans
      static let guide_exit = StringResource(key: "guide_exit", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 随时可以了解宝宝在家里的情况，并可以随时进行双向语音通话，可以与宝宝有更多的互动。
      /// 
      /// Locales: en, zh-Hans
      static let guide_text0 = StringResource(key: "guide_text0", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 记录宝宝的成长过程， 时刻都可以翻看宝宝的精彩瞬间。
      /// 
      /// Locales: en, zh-Hans
      static let guide_text1 = StringResource(key: "guide_text1", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 120°广角视野，宝宝在家的所有情况都能一目了然。
      /// 
      /// Locales: en, zh-Hans
      static let guide_text2 = StringResource(key: "guide_text2", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 提醒吃药 | 提醒睡觉 | 提醒喂食 | 提醒其他
      /// 
      /// Locales: en, zh-Hans
      static let guide_text3 = StringResource(key: "guide_text3", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 宝宝的24小时看护卫士
      /// 
      /// Locales: en, zh-Hans
      static let guide_title0 = StringResource(key: "guide_title0", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 时光机记录宝宝成长点点滴滴
      /// 
      /// Locales: en, zh-Hans
      static let guide_title1 = StringResource(key: "guide_title1", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 宝宝所有的情况都能够及时掌握
      /// 
      /// Locales: en, zh-Hans
      static let guide_title2 = StringResource(key: "guide_title2", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 准确无误，规划好宝宝的每一件事情
      /// 
      /// Locales: en, zh-Hans
      static let guide_title3 = StringResource(key: "guide_title3", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 客服热线
      /// 
      /// Locales: en, zh-Hans
      static let hotline = StringResource(key: "Hotline", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 嘈杂
      /// 
      /// Locales: en, zh-Hans
      static let ic_noiseH = StringResource(key: "ic_noiseH", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 安静
      /// 
      /// Locales: en, zh-Hans
      static let ic_noiseL = StringResource(key: "ic_noiseL", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 正常
      /// 
      /// Locales: en, zh-Hans
      static let ic_noiseM = StringResource(key: "ic_noiseM", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 偏高
      /// 
      /// Locales: en, zh-Hans
      static let ic_temH = StringResource(key: "ic_temH", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 偏低
      /// 
      /// Locales: en, zh-Hans
      static let ic_temL = StringResource(key: "ic_temL", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 适中
      /// 
      /// Locales: en, zh-Hans
      static let ic_temM = StringResource(key: "ic_temM", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 验证码
      /// 
      /// Locales: en, zh-Hans
      static let identityCode = StringResource(key: "identity code", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 圈子
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_community = StringResource(key: "leftSide_community", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注销
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_logout = StringResource(key: "leftSide_logout", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 选项
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_optional = StringResource(key: "leftSide_optional", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 记录
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_record = StringResource(key: "leftSide_record", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 选项
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_setting = StringResource(key: "leftSide_setting", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 时光机
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_timemachine = StringResource(key: "leftSide_timemachine", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 帐户
      /// 
      /// Locales: en, zh-Hans
      static let leftSide_userInformation = StringResource(key: "leftSide_userInformation", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: Copyright @ smilehome Co.
      /// 
      /// Locales: en, zh-Hans
      static let login_copyright = StringResource(key: "login_copyright", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 找回密码
      /// 
      /// Locales: en, zh-Hans
      static let login_find_passwd = StringResource(key: "login_find_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 登陆
      /// 
      /// Locales: en, zh-Hans
      static let login_login_btn = StringResource(key: "login_login_btn", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 登陆失败
      /// 
      /// Locales: en, zh-Hans
      static let login_login_err = StringResource(key: "login_login_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 未知错误：%d
      /// 
      /// Locales: en, zh-Hans
      static let login_login_unknown_err = StringResource(key: "login_login_unknown_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 密码
      /// 
      /// Locales: en, zh-Hans
      static let login_passwd = StringResource(key: "login_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注册用户
      /// 
      /// Locales: en, zh-Hans
      static let login_register = StringResource(key: "login_register", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 登陆
      /// 
      /// Locales: en, zh-Hans
      static let login_title = StringResource(key: "login_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 我想先试用
      /// 
      /// Locales: en, zh-Hans
      static let login_try = StringResource(key: "login_try", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 输入错误
      /// 
      /// Locales: en, zh-Hans
      static let login_user_input_err = StringResource(key: "login_user_input_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static let login_userid = StringResource(key: "login_userid", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注销账号
      /// 
      /// Locales: en, zh-Hans
      static let logout_logoutaccount = StringResource(key: "logout_logoutaccount", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注销后不会删除你的任何资料,下次依然可以使用本账号登陆。
      /// 
      /// Locales: en, zh-Hans
      static let logout_message = StringResource(key: "logout_message", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 主监控
      /// 
      /// Locales: en, zh-Hans
      static let mainMonitor = StringResource(key: "mainMonitor", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 未绑定
      /// 
      /// Locales: en, zh-Hans
      static let noBind = StringResource(key: "noBind", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 否
      /// 
      /// Locales: en, zh-Hans
      static let not_register_alert_jump_no = StringResource(key: "not_register_alert_jump_no", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 是
      /// 
      /// Locales: en, zh-Hans
      static let not_register_alert_jump_yes = StringResource(key: "not_register_alert_jump_yes", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 是否跳转到注册界面
      /// 
      /// Locales: en, zh-Hans
      static let not_register_alert_msg = StringResource(key: "not_register_alert_msg", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 该功能需注册
      /// 
      /// Locales: en, zh-Hans
      static let not_register_alert_title = StringResource(key: "not_register_alert_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确定
      /// 
      /// Locales: en, zh-Hans
      static let oK = StringResource(key: "OK", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 密码
      /// 
      /// Locales: en, zh-Hans
      static let password = StringResource(key: "password", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 原始比例
      /// 
      /// Locales: en, zh-Hans
      static let photoEdit_origin_ratio = StringResource(key: "photoEdit_origin_ratio", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 保存完成
      /// 
      /// Locales: en, zh-Hans
      static let photoEdit_saveCompleted = StringResource(key: "photoEdit_saveCompleted", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 正方形
      /// 
      /// Locales: en, zh-Hans
      static let photoEdit_square = StringResource(key: "photoEdit_square", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请输入密码
      /// 
      /// Locales: en, zh-Hans
      static let pleaseEnterPassword = StringResource(key: "Please enter password", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请输入要绑定的邮箱
      /// 
      /// Locales: en, zh-Hans
      static let pleaseEnterTheEMailToBind = StringResource(key: "Please enter the E-mail to bind", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请输入要绑定的手机
      /// 
      /// Locales: en, zh-Hans
      static let pleaseEnterTheMobilePhoneToBind = StringResource(key: "Please enter the mobile-phone to bind", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 推送失败
      /// 
      /// Locales: en, zh-Hans
      static let push_opt_err = StringResource(key: "push_opt_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请重新扫描
      /// 
      /// Locales: en, zh-Hans
      static let qrcode_message_descript = StringResource(key: "qrcode_message_descript", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 读取二维码失败
      /// 
      /// Locales: en, zh-Hans
      static let qrcode_title_error = StringResource(key: "qrcode_title_error", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 美化(照片)
      /// 
      /// Locales: en, zh-Hans
      static let record_beauty_photo = StringResource(key: "record_beauty_photo", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 选择
      /// 
      /// Locales: en, zh-Hans
      static let record_choose = StringResource(key: "record_choose", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 剪辑(视频)
      /// 
      /// Locales: en, zh-Hans
      static let record_clip_video = StringResource(key: "record_clip_video", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 事件(照片)
      /// 
      /// Locales: en, zh-Hans
      static let record_eventPhoto = StringResource(key: "record_event(photo)", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 事件(视频)
      /// 
      /// Locales: en, zh-Hans
      static let record_eventVideo = StringResource(key: "record_event(video)", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 照片
      /// 
      /// Locales: en, zh-Hans
      static let record_photo = StringResource(key: "record_photo", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 比例
      /// 
      /// Locales: en, zh-Hans
      static let record_ratio = StringResource(key: "record_ratio", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 还原
      /// 
      /// Locales: en, zh-Hans
      static let record_restore = StringResource(key: "record_restore", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 请选择需要分享的内容
      /// 
      /// Locales: en, zh-Hans
      static let record_share_tips_tooLess = StringResource(key: "record_share_tips_tooLess", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 最多只能分享一个视频
      /// 
      /// Locales: en, zh-Hans
      static let record_share_tips_tooMuch = StringResource(key: "record_share_tips_tooMuch", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确定删除?
      /// 
      /// Locales: en, zh-Hans
      static let record_sure_to_delete = StringResource(key: "record_sure_to_delete", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 视频
      /// 
      /// Locales: en, zh-Hans
      static let record_video = StringResource(key: "record_video", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 验证码
      /// 
      /// Locales: en, zh-Hans
      static let register_checkCodeIpt = StringResource(key: "register_checkCodeIpt", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 完成
      /// 
      /// Locales: en, zh-Hans
      static let register_finish = StringResource(key: "register_finish", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 获取验证码
      /// 
      /// Locales: en, zh-Hans
      static let register_getCheckCode = StringResource(key: "register_getCheckCode", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 获取验证码失败
      /// 
      /// Locales: en, zh-Hans
      static let register_get_check_code_err = StringResource(key: "register_get_check_code_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 已经有账户了？登陆
      /// 
      /// Locales: en, zh-Hans
      static let register_login = StringResource(key: "register_login", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 下一步
      /// 
      /// Locales: en, zh-Hans
      static let register_nextStep = StringResource(key: "register_nextStep", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设置密码
      /// 
      /// Locales: en, zh-Hans
      static let register_passwd = StringResource(key: "register_passwd", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 确认密码
      /// 
      /// Locales: en, zh-Hans
      static let register_passwdConfirm = StringResource(key: "register_passwdConfirm", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重新发送(%d)
      /// 
      /// Locales: en, zh-Hans
      static let register_reGetCheckCode = StringResource(key: "register_reGetCheckCode", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注册失败
      /// 
      /// Locales: en, zh-Hans
      static let register_register_err = StringResource(key: "register_register_err", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注册成功
      /// 
      /// Locales: en, zh-Hans
      static let register_register_success = StringResource(key: "register_register_success", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 注册
      /// 
      /// Locales: en, zh-Hans
      static let register_title = StringResource(key: "register_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static let register_userid = StringResource(key: "register_userid", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 重置密码
      /// 
      /// Locales: en, zh-Hans
      static let reset_title = StringResource(key: "reset_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 账号或密码错误
      /// 
      /// Locales: en, zh-Hans
      static let retAccountErr = StringResource(key: "RetAccountErr", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 账号不存在
      /// 
      /// Locales: en, zh-Hans
      static let retAccountNoExist = StringResource(key: "RetAccountNoExist", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 验证码错误
      /// 
      /// Locales: en, zh-Hans
      static let retCheckCodeError = StringResource(key: "RetCheckCodeError", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 服务器连接数据库失败
      /// 
      /// Locales: en, zh-Hans
      static let retConnFailure = StringResource(key: "RetConnFailure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设备已存在
      /// 
      /// Locales: en, zh-Hans
      static let retDevExist = StringResource(key: "RetDevExist", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 设备不存在
      /// 
      /// Locales: en, zh-Hans
      static let retDevNotExist = StringResource(key: "RetDevNotExist", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 操作失败
      /// 
      /// Locales: en, zh-Hans
      static let retFailure = StringResource(key: "RetFailure", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 提交请求信息异常
      /// 
      /// Locales: en, zh-Hans
      static let retInfAbnormal = StringResource(key: "RetInfAbnormal", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 该邮箱已被注册
      /// 
      /// Locales: en, zh-Hans
      static let retMailHasRes = StringResource(key: "RetMailHasRes", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 网络错误
      /// 
      /// Locales: en, zh-Hans
      static let retNetError = StringResource(key: "RetNetError", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 日志为空
      /// 
      /// Locales: en, zh-Hans
      static let retNotLog = StringResource(key: "RetNotLog", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 邮箱未设置
      /// 
      /// Locales: en, zh-Hans
      static let retNotMail = StringResource(key: "RetNotMail", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 该手机号已被注册
      /// 
      /// Locales: en, zh-Hans
      static let retPhoneHasRes = StringResource(key: "RetPhoneHasRes", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 用户未注册
      /// 
      /// Locales: en, zh-Hans
      static let retRegAlarmNoUserIdRecord = StringResource(key: "RetRegAlarmNoUserIdRecord", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 登陆码为空
      /// 
      /// Locales: en, zh-Hans
      static let retScodeEmpty = StringResource(key: "RetScodeEmpty", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 无记录设备
      /// 
      /// Locales: en, zh-Hans
      static let retSelectNoRecord = StringResource(key: "RetSelectNoRecord", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 操作成功
      /// 
      /// Locales: en, zh-Hans
      static let retSuccess = StringResource(key: "RetSuccess", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 未知错误
      /// 
      /// Locales: en, zh-Hans
      static let retUnknowError = StringResource(key: "RetUnknowError", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 账号未注册
      /// 
      /// Locales: en, zh-Hans
      static let retUserNotRes = StringResource(key: "RetUserNotRes", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 保存
      /// 
      /// Locales: en, zh-Hans
      static let save = StringResource(key: "save", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 发送
      /// 
      /// Locales: en, zh-Hans
      static let send = StringResource(key: "Send", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 关于我们
      /// 
      /// Locales: en, zh-Hans
      static let setting_AboutUs = StringResource(key: "setting_About us", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 联系我们
      /// 
      /// Locales: en, zh-Hans
      static let setting_ContactUs = StringResource(key: "setting_Contact us", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 常见问题
      /// 
      /// Locales: en, zh-Hans
      static let setting_FAQ = StringResource(key: "setting_FAQ", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 问题反馈
      /// 
      /// Locales: en, zh-Hans
      static let setting_QuestionFeedback = StringResource(key: "setting_Question feedback", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 宝贝信息
      /// 
      /// Locales: en, zh-Hans
      static let setting_babyInformation = StringResource(key: "setting_babyInformation", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 用户协议
      /// 
      /// Locales: en, zh-Hans
      static let setting_userProtocol = StringResource(key: "setting_userProtocol", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 成功绑定
      /// 
      /// Locales: en, zh-Hans
      static let successfullyBound = StringResource(key: "Successfully bound", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 选择照片
      /// 
      /// Locales: en, zh-Hans
      static let timemachine_choosePhoto = StringResource(key: "timemachine_choosePhoto", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 描述一下这张照片
      /// 
      /// Locales: en, zh-Hans
      static let timemachine_describeThePhoto = StringResource(key: "timemachine_describeThePhoto", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 期待下月精彩照片
      /// 
      /// Locales: en, zh-Hans
      static let timemachine_nextMonth = StringResource(key: "timemachine_nextMonth", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 说点什么吧...
      /// 
      /// Locales: en, zh-Hans
      static let timemachine_saySomeThing = StringResource(key: "timemachine_saySomeThing", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 今年
      /// 
      /// Locales: en, zh-Hans
      static let timemachine_thisYear = StringResource(key: "timemachine_thisYear", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 事件：
      /// 
      /// Locales: en, zh-Hans
      static let trend_content = StringResource(key: "trend_content", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 动态值/次
      /// 
      /// Locales: en, zh-Hans
      static let trend_count_unit = StringResource(key: "trend_count_unit", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 无活动记录
      /// 
      /// Locales: en, zh-Hans
      static let trend_no_data_description = StringResource(key: "trend_no_data_description", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 时间：
      /// 
      /// Locales: en, zh-Hans
      static let trend_time = StringResource(key: "trend_time", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 宝贝动态
      /// 
      /// Locales: en, zh-Hans
      static let trend_title = StringResource(key: "trend_title", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 今天
      /// 
      /// Locales: en, zh-Hans
      static let trend_today = StringResource(key: "trend_today", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 昨天
      /// 
      /// Locales: en, zh-Hans
      static let trend_yesterday = StringResource(key: "trend_yesterday", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 解除绑定
      /// 
      /// Locales: en, zh-Hans
      static let unbind = StringResource(key: "unbind", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 邮箱
      /// 
      /// Locales: en, zh-Hans
      static let userInformation_EMail = StringResource(key: "userInformation_E-mail", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 帐号
      /// 
      /// Locales: en, zh-Hans
      static let userInformation_account = StringResource(key: "userInformation_account", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 宝贝信息
      /// 
      /// Locales: en, zh-Hans
      static let userInformation_babyInformation = StringResource(key: "userInformation_babyInformation", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 修改密码
      /// 
      /// Locales: en, zh-Hans
      static let userInformation_changePassWord = StringResource(key: "userInformation_changePassWord", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static let userInformation_mobilePhone = StringResource(key: "userInformation_mobile-phone", tableName: "Localizable", locales: ["en", "zh-Hans"])
      /// en translation: 昵称
      /// 
      /// Locales: en, zh-Hans
      static let userInformation_nicheng = StringResource(key: "userInformation_nicheng", tableName: "Localizable", locales: ["en", "zh-Hans"])
      
      /// en translation: 到时间%@了呀
      /// 
      /// Locales: en, zh-Hans
      static func alarm_arrive_msg(value1: String) -> String {
        return String(format: NSLocalizedString("alarm_arrive_msg", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// en translation: 时间到！
      /// 
      /// Locales: en, zh-Hans
      static func alarm_arrive_title(_: Void) -> String {
        return NSLocalizedString("alarm_arrive_title", comment: "")
      }
      
      /// en translation: 亮彩灯
      /// 
      /// Locales: en, zh-Hans
      static func alarm_light_colorlight(_: Void) -> String {
        return NSLocalizedString("alarm_light_colorlight", comment: "")
      }
      
      /// en translation: 该拍照了
      /// 
      /// Locales: en, zh-Hans
      static func alarm_month_start_text(_: Void) -> String {
        return NSLocalizedString("alarm_month_start_text", comment: "")
      }
      
      /// en translation: 该拍照了
      /// 
      /// Locales: en, zh-Hans
      static func alarm_month_start_title(_: Void) -> String {
        return NSLocalizedString("alarm_month_start_title", comment: "")
      }
      
      /// en translation: 吃药
      /// 
      /// Locales: en, zh-Hans
      static func alarm_opt_drug(_: Void) -> String {
        return NSLocalizedString("alarm_opt_drug", comment: "")
      }
      
      /// en translation: 喂食
      /// 
      /// Locales: en, zh-Hans
      static func alarm_opt_eat(_: Void) -> String {
        return NSLocalizedString("alarm_opt_eat", comment: "")
      }
      
      /// en translation: 其他
      /// 
      /// Locales: en, zh-Hans
      static func alarm_opt_other(_: Void) -> String {
        return NSLocalizedString("alarm_opt_other", comment: "")
      }
      
      /// en translation: 睡觉
      /// 
      /// Locales: en, zh-Hans
      static func alarm_opt_sleep(_: Void) -> String {
        return NSLocalizedString("alarm_opt_sleep", comment: "")
      }
      
      /// en translation: 暂停
      /// 
      /// Locales: en, zh-Hans
      static func alarm_pause(_: Void) -> String {
        return NSLocalizedString("alarm_pause", comment: "")
      }
      
      /// en translation: 播放音乐
      /// 
      /// Locales: en, zh-Hans
      static func alarm_play_music(_: Void) -> String {
        return NSLocalizedString("alarm_play_music", comment: "")
      }
      
      /// en translation: 继续
      /// 
      /// Locales: en, zh-Hans
      static func alarm_resume(_: Void) -> String {
        return NSLocalizedString("alarm_resume", comment: "")
      }
      
      /// en translation: 启动
      /// 
      /// Locales: en, zh-Hans
      static func alarm_start(_: Void) -> String {
        return NSLocalizedString("alarm_start", comment: "")
      }
      
      /// en translation: 停止
      /// 
      /// Locales: en, zh-Hans
      static func alarm_stop(_: Void) -> String {
        return NSLocalizedString("alarm_stop", comment: "")
      }
      
      /// en translation: 提醒我给宝贝喂奶^-^
      /// 
      /// Locales: en, zh-Hans
      static func alarm_text_placehold(_: Void) -> String {
        return NSLocalizedString("alarm_text_placehold", comment: "")
      }
      
      /// en translation: 选择提醒选项
      /// 
      /// Locales: en, zh-Hans
      static func alarm_title(_: Void) -> String {
        return NSLocalizedString("alarm_title", comment: "")
      }
      
      /// en translation: 男
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_boy(_: Void) -> String {
        return NSLocalizedString("babyInformation_boy", comment: "")
      }
      
      /// en translation: 生日
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_brithday(_: Void) -> String {
        return NSLocalizedString("babyInformation_brithday", comment: "")
      }
      
      /// en translation: 女
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_girl(_: Void) -> String {
        return NSLocalizedString("babyInformation_girl", comment: "")
      }
      
      /// en translation: 填写宝贝信息,帮助我们正确记录宝贝成长记录。
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_introdution(_: Void) -> String {
        return NSLocalizedString("babyInformation_introdution", comment: "")
      }
      
      /// en translation: zh
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_local(_: Void) -> String {
        return NSLocalizedString("babyInformation_local", comment: "")
      }
      
      /// en translation: 保存失败,请重试
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_save_failure(_: Void) -> String {
        return NSLocalizedString("babyInformation_save_failure", comment: "")
      }
      
      /// en translation: 保存成功
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_save_success(_: Void) -> String {
        return NSLocalizedString("babyInformation_save_success", comment: "")
      }
      
      /// en translation: 性别
      /// 
      /// Locales: en, zh-Hans
      static func babyInformation_sex(_: Void) -> String {
        return NSLocalizedString("babyInformation_sex", comment: "")
      }
      
      /// en translation: 出现错误
      /// 
      /// Locales: en, zh-Hans
      static func background_error_title(_: Void) -> String {
        return NSLocalizedString("background_error_title", comment: "")
      }
      
      /// en translation: 绑定
      /// 
      /// Locales: en, zh-Hans
      static func bind(_: Void) -> String {
        return NSLocalizedString("bind", comment: "")
      }
      
      /// en translation: 连接失败
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_connect_failed(_: Void) -> String {
        return NSLocalizedString("camera_connect_connect_failed", comment: "")
      }
      
      /// en translation: 重置设备
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_connect_reset(_: Void) -> String {
        return NSLocalizedString("camera_connect_connect_reset", comment: "")
      }
      
      /// en translation: 重新尝试
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_connect_retry(_: Void) -> String {
        return NSLocalizedString("camera_connect_connect_retry", comment: "")
      }
      
      /// en translation: 连接失败
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_connect_failed(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_connect_failed", comment: "")
      }
      
      /// en translation: 知道了
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_ensure(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_ensure", comment: "")
      }
      
      /// en translation: 重试
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_retry(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_retry", comment: "")
      }
      
      /// en translation: 连接超时
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_timeout(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_timeout", comment: "")
      }
      
      /// en translation: 未知设备
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_unknown_device(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_unknown_device", comment: "")
      }
      
      /// en translation: 设备不支持
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_unsupported(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_unsupported", comment: "")
      }
      
      /// en translation: 密码错误
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_error_wrong_passwd(_: Void) -> String {
        return NSLocalizedString("camera_connect_error_wrong_passwd", comment: "")
      }
      
      /// en translation: 连接超时
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_timeout(_: Void) -> String {
        return NSLocalizedString("camera_connect_timeout", comment: "")
      }
      
      /// en translation: 未知设备
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_unknow_device(_: Void) -> String {
        return NSLocalizedString("camera_connect_unknow_device", comment: "")
      }
      
      /// en translation: 设备不支持
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_unsupported(_: Void) -> String {
        return NSLocalizedString("camera_connect_unsupported", comment: "")
      }
      
      /// en translation: 设备密码错误
      /// 
      /// Locales: en, zh-Hans
      static func camera_connect_wrong_password(_: Void) -> String {
        return NSLocalizedString("camera_connect_wrong_password", comment: "")
      }
      
      /// en translation: 视频连接中……
      /// 
      /// Locales: en, zh-Hans
      static func camera_no_start(_: Void) -> String {
        return NSLocalizedString("camera_no_start", comment: "")
      }
      
      /// en translation: 看护模式
      /// 
      /// Locales: en, zh-Hans
      static func camera_option_care(_: Void) -> String {
        return NSLocalizedString("camera_option_care", comment: "")
      }
      
      /// en translation: 勿扰模式
      /// 
      /// Locales: en, zh-Hans
      static func camera_option_quiet(_: Void) -> String {
        return NSLocalizedString("camera_option_quiet", comment: "")
      }
      
      /// en translation: 摄像头开关
      /// 
      /// Locales: en, zh-Hans
      static func camera_option_switch(_: Void) -> String {
        return NSLocalizedString("camera_option_switch", comment: "")
      }
      
      /// en translation: 取消
      /// 
      /// Locales: en, zh-Hans
      static func cancel(_: Void) -> String {
        return NSLocalizedString("Cancel", comment: "")
      }
      
      /// en translation: 请输入当前Wi-Fi密码，点击加入开始连续设备
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step0_descript(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step0_descript", comment: "")
      }
      
      /// en translation: 输入密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step0_title(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step0_title", comment: "")
      }
      
      /// en translation: 输入密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step0_wifi_passwd(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step0_wifi_passwd", comment: "")
      }
      
      /// en translation: Wifi密码不能为空！
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step0_wifi_passwd_err(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step0_wifi_passwd_err", comment: "")
      }
      
      /// en translation: 输入错误
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step0_wifi_passwd_err_title(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step0_wifi_passwd_err_title", comment: "")
      }
      
      /// en translation: Wifi密码不能少于8位！
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step0_wifi_passwd_too_short(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step0_wifi_passwd_too_short", comment: "")
      }
      
      /// en translation: 正在连接……
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step1_connecting(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step1_connecting", comment: "")
      }
      
      /// en translation: 请耐心等待，已连接%@
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step1_has_connect(value1: String) -> String {
        return String(format: NSLocalizedString("cfg_connect_step1_has_connect", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// en translation: 正在连接
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step1_title(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step1_title", comment: "")
      }
      
      /// en translation: 1 输入错误的WiFi密码； 2 当前的网络环境较差。
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step2_connect_content_fail(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step2_connect_content_fail", comment: "")
      }
      
      /// en translation: 马上进入监控画面%@
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step2_connect_content_success(value1: String) -> String {
        return String(format: NSLocalizedString("cfg_connect_step2_connect_content_success", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// en translation: 连接失败的原因可能是：
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step2_connect_status_fail(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step2_connect_status_fail", comment: "")
      }
      
      /// en translation: 连接成功
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step2_connect_status_success(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step2_connect_status_success", comment: "")
      }
      
      /// en translation: 连接失败
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step2_fail_title(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step2_fail_title", comment: "")
      }
      
      /// en translation: 连接成功
      /// 
      /// Locales: en, zh-Hans
      static func cfg_connect_step2_success_title(_: Void) -> String {
        return NSLocalizedString("cfg_connect_step2_success_title", comment: "")
      }
      
      /// en translation: 连接Wifi
      /// 
      /// Locales: en, zh-Hans
      static func cfg_descript0(_: Void) -> String {
        return NSLocalizedString("cfg_descript0", comment: "")
      }
      
      /// en translation: 接通电源,确保通电状态
      /// 
      /// Locales: en, zh-Hans
      static func cfg_descript1(_: Void) -> String {
        return NSLocalizedString("cfg_descript1", comment: "")
      }
      
      /// en translation: 请输入设备密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_dev_passwd_ipt(_: Void) -> String {
        return NSLocalizedString("cfg_dev_passwd_ipt", comment: "")
      }
      
      /// en translation: 输入设备密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_dev_passwd_title(_: Void) -> String {
        return NSLocalizedString("cfg_dev_passwd_title", comment: "")
      }
      
      /// en translation: 密码错误
      /// 
      /// Locales: en, zh-Hans
      static func cfg_dev_wifi_passwd_error(_: Void) -> String {
        return NSLocalizedString("cfg_dev_wifi_passwd_error", comment: "")
      }
      
      /// en translation: 请输入WiFi密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_dev_wifi_passwd_ipt(_: Void) -> String {
        return NSLocalizedString("cfg_dev_wifi_passwd_ipt", comment: "")
      }
      
      /// en translation: 输入WiFi密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_dev_wifi_passwd_ipt_title(_: Void) -> String {
        return NSLocalizedString("cfg_dev_wifi_passwd_ipt_title", comment: "")
      }
      
      /// en translation: 确定
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_ensure(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_ensure", comment: "")
      }
      
      /// en translation: 重试
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_error_retry(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_error_retry", comment: "")
      }
      
      /// en translation: 原密码错误
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_error_title(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_error_title", comment: "")
      }
      
      /// en translation: 输入密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_passwd_new_passwd(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_passwd_new_passwd", comment: "")
      }
      
      /// en translation: 确认密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_passwd_new_passwd_confirm(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_passwd_new_passwd_confirm", comment: "")
      }
      
      /// en translation: 原密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_passwd_old_passwd(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_passwd_old_passwd", comment: "")
      }
      
      /// en translation: 修改设备密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_modify_device_title(_: Void) -> String {
        return NSLocalizedString("cfg_modify_device_title", comment: "")
      }
      
      /// en translation: 下一步
      /// 
      /// Locales: en, zh-Hans
      static func cfg_nextStep(_: Void) -> String {
        return NSLocalizedString("cfg_nextStep", comment: "")
      }
      
      /// en translation: 加入
      /// 
      /// Locales: en, zh-Hans
      static func cfg_right_text(_: Void) -> String {
        return NSLocalizedString("cfg_right_text", comment: "")
      }
      
      /// en translation: 开始
      /// 
      /// Locales: en, zh-Hans
      static func cfg_start(_: Void) -> String {
        return NSLocalizedString("cfg_start", comment: "")
      }
      
      /// en translation: 注册账户
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_continue_register(_: Void) -> String {
        return NSLocalizedString("cfg_step3_continue_register", comment: "")
      }
      
      /// en translation: 不注册使用会影响到某些功能的使用 建议注册！
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_continue_title(_: Void) -> String {
        return NSLocalizedString("cfg_step3_continue_title", comment: "")
      }
      
      /// en translation: 继续使用
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_continue_use(_: Void) -> String {
        return NSLocalizedString("cfg_step3_continue_use", comment: "")
      }
      
      /// en translation: 注册账户
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_register(_: Void) -> String {
        return NSLocalizedString("cfg_step3_register", comment: "")
      }
      
      /// en translation: 重试
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_retry(_: Void) -> String {
        return NSLocalizedString("cfg_step3_retry", comment: "")
      }
      
      /// en translation: Wifi密码错误，重新输入正确的密码
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_retry_err_msg_one(_: Void) -> String {
        return NSLocalizedString("cfg_step3_retry_err_msg_one", comment: "")
      }
      
      /// en translation: 当前的网络环境较差，重新连接网络 尝试手机靠近监视器一点
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_retry_err_msg_two(_: Void) -> String {
        return NSLocalizedString("cfg_step3_retry_err_msg_two", comment: "")
      }
      
      /// en translation: 开始使用
      /// 
      /// Locales: en, zh-Hans
      static func cfg_step3_use(_: Void) -> String {
        return NSLocalizedString("cfg_step3_use", comment: "")
      }
      
      /// en translation: 配置设备
      /// 
      /// Locales: en, zh-Hans
      static func cfg_title(_: Void) -> String {
        return NSLocalizedString("cfg_title", comment: "")
      }
      
      /// en translation: 是否跳转到Wi-Fi设置界面？
      /// 
      /// Locales: en, zh-Hans
      static func cfg_wifi_jump_connect(_: Void) -> String {
        return NSLocalizedString("cfg_wifi_jump_connect", comment: "")
      }
      
      /// en translation: 两次输入的新密码不一致!
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_different(_: Void) -> String {
        return NSLocalizedString("changePassWord_different", comment: "")
      }
      
      /// en translation: 密码修改失败,请重试!
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_failure(_: Void) -> String {
        return NSLocalizedString("changePassWord_failure", comment: "")
      }
      
      /// en translation: 新密码
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_newPassWord(_: Void) -> String {
        return NSLocalizedString("changePassWord_newPassWord", comment: "")
      }
      
      /// en translation: 原密码
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_originPassWord(_: Void) -> String {
        return NSLocalizedString("changePassWord_originPassWord", comment: "")
      }
      
      /// en translation: 原密码错误!
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_originPassWordWrong(_: Void) -> String {
        return NSLocalizedString("changePassWord_originPassWordWrong", comment: "")
      }
      
      /// en translation: 密码修改成功!
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_success(_: Void) -> String {
        return NSLocalizedString("changePassWord_success", comment: "")
      }
      
      /// en translation: 确认新密码
      /// 
      /// Locales: en, zh-Hans
      static func changePassWord_sureNewPassWord(_: Void) -> String {
        return NSLocalizedString("changePassWord_sureNewPassWord", comment: "")
      }
      
      /// en translation: 编辑
      /// 
      /// Locales: en, zh-Hans
      static func edit(_: Void) -> String {
        return NSLocalizedString("edit", comment: "")
      }
      
      /// en translation: 输入错误
      /// 
      /// Locales: en, zh-Hans
      static func error_userid_input(_: Void) -> String {
        return NSLocalizedString("error_userid_input", comment: "")
      }
      
      /// en translation: 事件：
      /// 
      /// Locales: en, zh-Hans
      static func event_time_event(_: Void) -> String {
        return NSLocalizedString("event_time_event", comment: "")
      }
      
      /// en translation: 时间：
      /// 
      /// Locales: en, zh-Hans
      static func event_time_label(_: Void) -> String {
        return NSLocalizedString("event_time_label", comment: "")
      }
      
      /// en translation: 操作失败
      /// 
      /// Locales: en, zh-Hans
      static func failureBound(_: Void) -> String {
        return NSLocalizedString("Failure bound", comment: "")
      }
      
      /// en translation: 反馈失败,请稍后再试
      /// 
      /// Locales: en, zh-Hans
      static func feedbackFailure(_: Void) -> String {
        return NSLocalizedString("feedbackFailure", comment: "")
      }
      
      /// en translation: 感谢你的反馈,请写下你的问题或意见
      /// 
      /// Locales: en, zh-Hans
      static func feedbackPlaceholder(_: Void) -> String {
        return NSLocalizedString("feedbackPlaceholder", comment: "")
      }
      
      /// en translation: 感谢你的反馈
      /// 
      /// Locales: en, zh-Hans
      static func feedbackSuccess(_: Void) -> String {
        return NSLocalizedString("feedbackSuccess", comment: "")
      }
      
      /// en translation: 验证码
      /// 
      /// Locales: en, zh-Hans
      static func find_checkCodeIpt(_: Void) -> String {
        return NSLocalizedString("find_checkCodeIpt", comment: "")
      }
      
      /// en translation: 找回失败
      /// 
      /// Locales: en, zh-Hans
      static func find_err_title(_: Void) -> String {
        return NSLocalizedString("find_err_title", comment: "")
      }
      
      /// en translation: 完成
      /// 
      /// Locales: en, zh-Hans
      static func find_finish(_: Void) -> String {
        return NSLocalizedString("find_finish", comment: "")
      }
      
      /// en translation: 获取验证码
      /// 
      /// Locales: en, zh-Hans
      static func find_getCheckCode(_: Void) -> String {
        return NSLocalizedString("find_getCheckCode", comment: "")
      }
      
      /// en translation: 已经有账号了？登陆
      /// 
      /// Locales: en, zh-Hans
      static func find_login(_: Void) -> String {
        return NSLocalizedString("find_login", comment: "")
      }
      
      /// en translation: 下一步
      /// 
      /// Locales: en, zh-Hans
      static func find_nextStep(_: Void) -> String {
        return NSLocalizedString("find_nextStep", comment: "")
      }
      
      /// en translation: 设置密码
      /// 
      /// Locales: en, zh-Hans
      static func find_passwd(_: Void) -> String {
        return NSLocalizedString("find_passwd", comment: "")
      }
      
      /// en translation: 确认密码
      /// 
      /// Locales: en, zh-Hans
      static func find_passwdConfirm(_: Void) -> String {
        return NSLocalizedString("find_passwdConfirm", comment: "")
      }
      
      /// en translation: 验证码错误
      /// 
      /// Locales: en, zh-Hans
      static func find_submit_checkcode_err(_: Void) -> String {
        return NSLocalizedString("find_submit_checkcode_err", comment: "")
      }
      
      /// en translation: Successfully!
      /// 
      /// Locales: en, zh-Hans
      static func find_suceess_title(_: Void) -> String {
        return NSLocalizedString("find_suceess_title", comment: "")
      }
      
      /// en translation: 找回密码
      /// 
      /// Locales: en, zh-Hans
      static func find_title(_: Void) -> String {
        return NSLocalizedString("find_title", comment: "")
      }
      
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static func find_userid(_: Void) -> String {
        return NSLocalizedString("find_userid", comment: "")
      }
      
      /// en translation: 计时
      /// 
      /// Locales: en, zh-Hans
      static func func_count_time(_: Void) -> String {
        return NSLocalizedString("func_count_time", comment: "")
      }
      
      /// en translation: 音乐
      /// 
      /// Locales: en, zh-Hans
      static func func_music(_: Void) -> String {
        return NSLocalizedString("func_music", comment: "")
      }
      
      /// en translation: 录像
      /// 
      /// Locales: en, zh-Hans
      static func func_record(_: Void) -> String {
        return NSLocalizedString("func_record", comment: "")
      }
      
      /// en translation: 截屏
      /// 
      /// Locales: en, zh-Hans
      static func func_screen_shot(_: Void) -> String {
        return NSLocalizedString("func_screen_shot", comment: "")
      }
      
      /// en translation: 获取验证码
      /// 
      /// Locales: en, zh-Hans
      static func getIdentityCode(_: Void) -> String {
        return NSLocalizedString("get identity code", comment: "")
      }
      
      /// en translation: 立即进入
      /// 
      /// Locales: en, zh-Hans
      static func guide_exit(_: Void) -> String {
        return NSLocalizedString("guide_exit", comment: "")
      }
      
      /// en translation: 随时可以了解宝宝在家里的情况，并可以随时进行双向语音通话，可以与宝宝有更多的互动。
      /// 
      /// Locales: en, zh-Hans
      static func guide_text0(_: Void) -> String {
        return NSLocalizedString("guide_text0", comment: "")
      }
      
      /// en translation: 记录宝宝的成长过程， 时刻都可以翻看宝宝的精彩瞬间。
      /// 
      /// Locales: en, zh-Hans
      static func guide_text1(_: Void) -> String {
        return NSLocalizedString("guide_text1", comment: "")
      }
      
      /// en translation: 120°广角视野，宝宝在家的所有情况都能一目了然。
      /// 
      /// Locales: en, zh-Hans
      static func guide_text2(_: Void) -> String {
        return NSLocalizedString("guide_text2", comment: "")
      }
      
      /// en translation: 提醒吃药 | 提醒睡觉 | 提醒喂食 | 提醒其他
      /// 
      /// Locales: en, zh-Hans
      static func guide_text3(_: Void) -> String {
        return NSLocalizedString("guide_text3", comment: "")
      }
      
      /// en translation: 宝宝的24小时看护卫士
      /// 
      /// Locales: en, zh-Hans
      static func guide_title0(_: Void) -> String {
        return NSLocalizedString("guide_title0", comment: "")
      }
      
      /// en translation: 时光机记录宝宝成长点点滴滴
      /// 
      /// Locales: en, zh-Hans
      static func guide_title1(_: Void) -> String {
        return NSLocalizedString("guide_title1", comment: "")
      }
      
      /// en translation: 宝宝所有的情况都能够及时掌握
      /// 
      /// Locales: en, zh-Hans
      static func guide_title2(_: Void) -> String {
        return NSLocalizedString("guide_title2", comment: "")
      }
      
      /// en translation: 准确无误，规划好宝宝的每一件事情
      /// 
      /// Locales: en, zh-Hans
      static func guide_title3(_: Void) -> String {
        return NSLocalizedString("guide_title3", comment: "")
      }
      
      /// en translation: 客服热线
      /// 
      /// Locales: en, zh-Hans
      static func hotline(_: Void) -> String {
        return NSLocalizedString("Hotline", comment: "")
      }
      
      /// en translation: 嘈杂
      /// 
      /// Locales: en, zh-Hans
      static func ic_noiseH(_: Void) -> String {
        return NSLocalizedString("ic_noiseH", comment: "")
      }
      
      /// en translation: 安静
      /// 
      /// Locales: en, zh-Hans
      static func ic_noiseL(_: Void) -> String {
        return NSLocalizedString("ic_noiseL", comment: "")
      }
      
      /// en translation: 正常
      /// 
      /// Locales: en, zh-Hans
      static func ic_noiseM(_: Void) -> String {
        return NSLocalizedString("ic_noiseM", comment: "")
      }
      
      /// en translation: 偏高
      /// 
      /// Locales: en, zh-Hans
      static func ic_temH(_: Void) -> String {
        return NSLocalizedString("ic_temH", comment: "")
      }
      
      /// en translation: 偏低
      /// 
      /// Locales: en, zh-Hans
      static func ic_temL(_: Void) -> String {
        return NSLocalizedString("ic_temL", comment: "")
      }
      
      /// en translation: 适中
      /// 
      /// Locales: en, zh-Hans
      static func ic_temM(_: Void) -> String {
        return NSLocalizedString("ic_temM", comment: "")
      }
      
      /// en translation: 验证码
      /// 
      /// Locales: en, zh-Hans
      static func identityCode(_: Void) -> String {
        return NSLocalizedString("identity code", comment: "")
      }
      
      /// en translation: 圈子
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_community(_: Void) -> String {
        return NSLocalizedString("leftSide_community", comment: "")
      }
      
      /// en translation: 注销
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_logout(_: Void) -> String {
        return NSLocalizedString("leftSide_logout", comment: "")
      }
      
      /// en translation: 选项
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_optional(_: Void) -> String {
        return NSLocalizedString("leftSide_optional", comment: "")
      }
      
      /// en translation: 记录
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_record(_: Void) -> String {
        return NSLocalizedString("leftSide_record", comment: "")
      }
      
      /// en translation: 选项
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_setting(_: Void) -> String {
        return NSLocalizedString("leftSide_setting", comment: "")
      }
      
      /// en translation: 时光机
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_timemachine(_: Void) -> String {
        return NSLocalizedString("leftSide_timemachine", comment: "")
      }
      
      /// en translation: 帐户
      /// 
      /// Locales: en, zh-Hans
      static func leftSide_userInformation(_: Void) -> String {
        return NSLocalizedString("leftSide_userInformation", comment: "")
      }
      
      /// en translation: Copyright @ smilehome Co.
      /// 
      /// Locales: en, zh-Hans
      static func login_copyright(_: Void) -> String {
        return NSLocalizedString("login_copyright", comment: "")
      }
      
      /// en translation: 找回密码
      /// 
      /// Locales: en, zh-Hans
      static func login_find_passwd(_: Void) -> String {
        return NSLocalizedString("login_find_passwd", comment: "")
      }
      
      /// en translation: 登陆
      /// 
      /// Locales: en, zh-Hans
      static func login_login_btn(_: Void) -> String {
        return NSLocalizedString("login_login_btn", comment: "")
      }
      
      /// en translation: 登陆失败
      /// 
      /// Locales: en, zh-Hans
      static func login_login_err(_: Void) -> String {
        return NSLocalizedString("login_login_err", comment: "")
      }
      
      /// en translation: 未知错误：%d
      /// 
      /// Locales: en, zh-Hans
      static func login_login_unknown_err(value1: Int) -> String {
        return String(format: NSLocalizedString("login_login_unknown_err", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// en translation: 密码
      /// 
      /// Locales: en, zh-Hans
      static func login_passwd(_: Void) -> String {
        return NSLocalizedString("login_passwd", comment: "")
      }
      
      /// en translation: 注册用户
      /// 
      /// Locales: en, zh-Hans
      static func login_register(_: Void) -> String {
        return NSLocalizedString("login_register", comment: "")
      }
      
      /// en translation: 登陆
      /// 
      /// Locales: en, zh-Hans
      static func login_title(_: Void) -> String {
        return NSLocalizedString("login_title", comment: "")
      }
      
      /// en translation: 我想先试用
      /// 
      /// Locales: en, zh-Hans
      static func login_try(_: Void) -> String {
        return NSLocalizedString("login_try", comment: "")
      }
      
      /// en translation: 输入错误
      /// 
      /// Locales: en, zh-Hans
      static func login_user_input_err(_: Void) -> String {
        return NSLocalizedString("login_user_input_err", comment: "")
      }
      
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static func login_userid(_: Void) -> String {
        return NSLocalizedString("login_userid", comment: "")
      }
      
      /// en translation: 注销账号
      /// 
      /// Locales: en, zh-Hans
      static func logout_logoutaccount(_: Void) -> String {
        return NSLocalizedString("logout_logoutaccount", comment: "")
      }
      
      /// en translation: 注销后不会删除你的任何资料,下次依然可以使用本账号登陆。
      /// 
      /// Locales: en, zh-Hans
      static func logout_message(_: Void) -> String {
        return NSLocalizedString("logout_message", comment: "")
      }
      
      /// en translation: 主监控
      /// 
      /// Locales: en, zh-Hans
      static func mainMonitor(_: Void) -> String {
        return NSLocalizedString("mainMonitor", comment: "")
      }
      
      /// en translation: 未绑定
      /// 
      /// Locales: en, zh-Hans
      static func noBind(_: Void) -> String {
        return NSLocalizedString("noBind", comment: "")
      }
      
      /// en translation: 否
      /// 
      /// Locales: en, zh-Hans
      static func not_register_alert_jump_no(_: Void) -> String {
        return NSLocalizedString("not_register_alert_jump_no", comment: "")
      }
      
      /// en translation: 是
      /// 
      /// Locales: en, zh-Hans
      static func not_register_alert_jump_yes(_: Void) -> String {
        return NSLocalizedString("not_register_alert_jump_yes", comment: "")
      }
      
      /// en translation: 是否跳转到注册界面
      /// 
      /// Locales: en, zh-Hans
      static func not_register_alert_msg(_: Void) -> String {
        return NSLocalizedString("not_register_alert_msg", comment: "")
      }
      
      /// en translation: 该功能需注册
      /// 
      /// Locales: en, zh-Hans
      static func not_register_alert_title(_: Void) -> String {
        return NSLocalizedString("not_register_alert_title", comment: "")
      }
      
      /// en translation: 确定
      /// 
      /// Locales: en, zh-Hans
      static func oK(_: Void) -> String {
        return NSLocalizedString("OK", comment: "")
      }
      
      /// en translation: 密码
      /// 
      /// Locales: en, zh-Hans
      static func password(_: Void) -> String {
        return NSLocalizedString("password", comment: "")
      }
      
      /// en translation: 原始比例
      /// 
      /// Locales: en, zh-Hans
      static func photoEdit_origin_ratio(_: Void) -> String {
        return NSLocalizedString("photoEdit_origin_ratio", comment: "")
      }
      
      /// en translation: 保存完成
      /// 
      /// Locales: en, zh-Hans
      static func photoEdit_saveCompleted(_: Void) -> String {
        return NSLocalizedString("photoEdit_saveCompleted", comment: "")
      }
      
      /// en translation: 正方形
      /// 
      /// Locales: en, zh-Hans
      static func photoEdit_square(_: Void) -> String {
        return NSLocalizedString("photoEdit_square", comment: "")
      }
      
      /// en translation: 请输入密码
      /// 
      /// Locales: en, zh-Hans
      static func pleaseEnterPassword(_: Void) -> String {
        return NSLocalizedString("Please enter password", comment: "")
      }
      
      /// en translation: 请输入要绑定的邮箱
      /// 
      /// Locales: en, zh-Hans
      static func pleaseEnterTheEMailToBind(_: Void) -> String {
        return NSLocalizedString("Please enter the E-mail to bind", comment: "")
      }
      
      /// en translation: 请输入要绑定的手机
      /// 
      /// Locales: en, zh-Hans
      static func pleaseEnterTheMobilePhoneToBind(_: Void) -> String {
        return NSLocalizedString("Please enter the mobile-phone to bind", comment: "")
      }
      
      /// en translation: 推送失败
      /// 
      /// Locales: en, zh-Hans
      static func push_opt_err(_: Void) -> String {
        return NSLocalizedString("push_opt_err", comment: "")
      }
      
      /// en translation: 请重新扫描
      /// 
      /// Locales: en, zh-Hans
      static func qrcode_message_descript(_: Void) -> String {
        return NSLocalizedString("qrcode_message_descript", comment: "")
      }
      
      /// en translation: 读取二维码失败
      /// 
      /// Locales: en, zh-Hans
      static func qrcode_title_error(_: Void) -> String {
        return NSLocalizedString("qrcode_title_error", comment: "")
      }
      
      /// en translation: 美化(照片)
      /// 
      /// Locales: en, zh-Hans
      static func record_beauty_photo(_: Void) -> String {
        return NSLocalizedString("record_beauty_photo", comment: "")
      }
      
      /// en translation: 选择
      /// 
      /// Locales: en, zh-Hans
      static func record_choose(_: Void) -> String {
        return NSLocalizedString("record_choose", comment: "")
      }
      
      /// en translation: 剪辑(视频)
      /// 
      /// Locales: en, zh-Hans
      static func record_clip_video(_: Void) -> String {
        return NSLocalizedString("record_clip_video", comment: "")
      }
      
      /// en translation: 事件(照片)
      /// 
      /// Locales: en, zh-Hans
      static func record_eventPhoto(_: Void) -> String {
        return NSLocalizedString("record_event(photo)", comment: "")
      }
      
      /// en translation: 事件(视频)
      /// 
      /// Locales: en, zh-Hans
      static func record_eventVideo(_: Void) -> String {
        return NSLocalizedString("record_event(video)", comment: "")
      }
      
      /// en translation: 照片
      /// 
      /// Locales: en, zh-Hans
      static func record_photo(_: Void) -> String {
        return NSLocalizedString("record_photo", comment: "")
      }
      
      /// en translation: 比例
      /// 
      /// Locales: en, zh-Hans
      static func record_ratio(_: Void) -> String {
        return NSLocalizedString("record_ratio", comment: "")
      }
      
      /// en translation: 还原
      /// 
      /// Locales: en, zh-Hans
      static func record_restore(_: Void) -> String {
        return NSLocalizedString("record_restore", comment: "")
      }
      
      /// en translation: 请选择需要分享的内容
      /// 
      /// Locales: en, zh-Hans
      static func record_share_tips_tooLess(_: Void) -> String {
        return NSLocalizedString("record_share_tips_tooLess", comment: "")
      }
      
      /// en translation: 最多只能分享一个视频
      /// 
      /// Locales: en, zh-Hans
      static func record_share_tips_tooMuch(_: Void) -> String {
        return NSLocalizedString("record_share_tips_tooMuch", comment: "")
      }
      
      /// en translation: 确定删除?
      /// 
      /// Locales: en, zh-Hans
      static func record_sure_to_delete(_: Void) -> String {
        return NSLocalizedString("record_sure_to_delete", comment: "")
      }
      
      /// en translation: 视频
      /// 
      /// Locales: en, zh-Hans
      static func record_video(_: Void) -> String {
        return NSLocalizedString("record_video", comment: "")
      }
      
      /// en translation: 验证码
      /// 
      /// Locales: en, zh-Hans
      static func register_checkCodeIpt(_: Void) -> String {
        return NSLocalizedString("register_checkCodeIpt", comment: "")
      }
      
      /// en translation: 完成
      /// 
      /// Locales: en, zh-Hans
      static func register_finish(_: Void) -> String {
        return NSLocalizedString("register_finish", comment: "")
      }
      
      /// en translation: 获取验证码
      /// 
      /// Locales: en, zh-Hans
      static func register_getCheckCode(_: Void) -> String {
        return NSLocalizedString("register_getCheckCode", comment: "")
      }
      
      /// en translation: 获取验证码失败
      /// 
      /// Locales: en, zh-Hans
      static func register_get_check_code_err(_: Void) -> String {
        return NSLocalizedString("register_get_check_code_err", comment: "")
      }
      
      /// en translation: 已经有账户了？登陆
      /// 
      /// Locales: en, zh-Hans
      static func register_login(_: Void) -> String {
        return NSLocalizedString("register_login", comment: "")
      }
      
      /// en translation: 下一步
      /// 
      /// Locales: en, zh-Hans
      static func register_nextStep(_: Void) -> String {
        return NSLocalizedString("register_nextStep", comment: "")
      }
      
      /// en translation: 设置密码
      /// 
      /// Locales: en, zh-Hans
      static func register_passwd(_: Void) -> String {
        return NSLocalizedString("register_passwd", comment: "")
      }
      
      /// en translation: 确认密码
      /// 
      /// Locales: en, zh-Hans
      static func register_passwdConfirm(_: Void) -> String {
        return NSLocalizedString("register_passwdConfirm", comment: "")
      }
      
      /// en translation: 重新发送(%d)
      /// 
      /// Locales: en, zh-Hans
      static func register_reGetCheckCode(value1: Int) -> String {
        return String(format: NSLocalizedString("register_reGetCheckCode", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// en translation: 注册失败
      /// 
      /// Locales: en, zh-Hans
      static func register_register_err(_: Void) -> String {
        return NSLocalizedString("register_register_err", comment: "")
      }
      
      /// en translation: 注册成功
      /// 
      /// Locales: en, zh-Hans
      static func register_register_success(_: Void) -> String {
        return NSLocalizedString("register_register_success", comment: "")
      }
      
      /// en translation: 注册
      /// 
      /// Locales: en, zh-Hans
      static func register_title(_: Void) -> String {
        return NSLocalizedString("register_title", comment: "")
      }
      
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static func register_userid(_: Void) -> String {
        return NSLocalizedString("register_userid", comment: "")
      }
      
      /// en translation: 重置密码
      /// 
      /// Locales: en, zh-Hans
      static func reset_title(_: Void) -> String {
        return NSLocalizedString("reset_title", comment: "")
      }
      
      /// en translation: 账号或密码错误
      /// 
      /// Locales: en, zh-Hans
      static func retAccountErr(_: Void) -> String {
        return NSLocalizedString("RetAccountErr", comment: "")
      }
      
      /// en translation: 账号不存在
      /// 
      /// Locales: en, zh-Hans
      static func retAccountNoExist(_: Void) -> String {
        return NSLocalizedString("RetAccountNoExist", comment: "")
      }
      
      /// en translation: 验证码错误
      /// 
      /// Locales: en, zh-Hans
      static func retCheckCodeError(_: Void) -> String {
        return NSLocalizedString("RetCheckCodeError", comment: "")
      }
      
      /// en translation: 服务器连接数据库失败
      /// 
      /// Locales: en, zh-Hans
      static func retConnFailure(_: Void) -> String {
        return NSLocalizedString("RetConnFailure", comment: "")
      }
      
      /// en translation: 设备已存在
      /// 
      /// Locales: en, zh-Hans
      static func retDevExist(_: Void) -> String {
        return NSLocalizedString("RetDevExist", comment: "")
      }
      
      /// en translation: 设备不存在
      /// 
      /// Locales: en, zh-Hans
      static func retDevNotExist(_: Void) -> String {
        return NSLocalizedString("RetDevNotExist", comment: "")
      }
      
      /// en translation: 操作失败
      /// 
      /// Locales: en, zh-Hans
      static func retFailure(_: Void) -> String {
        return NSLocalizedString("RetFailure", comment: "")
      }
      
      /// en translation: 提交请求信息异常
      /// 
      /// Locales: en, zh-Hans
      static func retInfAbnormal(_: Void) -> String {
        return NSLocalizedString("RetInfAbnormal", comment: "")
      }
      
      /// en translation: 该邮箱已被注册
      /// 
      /// Locales: en, zh-Hans
      static func retMailHasRes(_: Void) -> String {
        return NSLocalizedString("RetMailHasRes", comment: "")
      }
      
      /// en translation: 网络错误
      /// 
      /// Locales: en, zh-Hans
      static func retNetError(_: Void) -> String {
        return NSLocalizedString("RetNetError", comment: "")
      }
      
      /// en translation: 日志为空
      /// 
      /// Locales: en, zh-Hans
      static func retNotLog(_: Void) -> String {
        return NSLocalizedString("RetNotLog", comment: "")
      }
      
      /// en translation: 邮箱未设置
      /// 
      /// Locales: en, zh-Hans
      static func retNotMail(_: Void) -> String {
        return NSLocalizedString("RetNotMail", comment: "")
      }
      
      /// en translation: 该手机号已被注册
      /// 
      /// Locales: en, zh-Hans
      static func retPhoneHasRes(_: Void) -> String {
        return NSLocalizedString("RetPhoneHasRes", comment: "")
      }
      
      /// en translation: 用户未注册
      /// 
      /// Locales: en, zh-Hans
      static func retRegAlarmNoUserIdRecord(_: Void) -> String {
        return NSLocalizedString("RetRegAlarmNoUserIdRecord", comment: "")
      }
      
      /// en translation: 登陆码为空
      /// 
      /// Locales: en, zh-Hans
      static func retScodeEmpty(_: Void) -> String {
        return NSLocalizedString("RetScodeEmpty", comment: "")
      }
      
      /// en translation: 无记录设备
      /// 
      /// Locales: en, zh-Hans
      static func retSelectNoRecord(_: Void) -> String {
        return NSLocalizedString("RetSelectNoRecord", comment: "")
      }
      
      /// en translation: 操作成功
      /// 
      /// Locales: en, zh-Hans
      static func retSuccess(_: Void) -> String {
        return NSLocalizedString("RetSuccess", comment: "")
      }
      
      /// en translation: 未知错误
      /// 
      /// Locales: en, zh-Hans
      static func retUnknowError(_: Void) -> String {
        return NSLocalizedString("RetUnknowError", comment: "")
      }
      
      /// en translation: 账号未注册
      /// 
      /// Locales: en, zh-Hans
      static func retUserNotRes(_: Void) -> String {
        return NSLocalizedString("RetUserNotRes", comment: "")
      }
      
      /// en translation: 保存
      /// 
      /// Locales: en, zh-Hans
      static func save(_: Void) -> String {
        return NSLocalizedString("save", comment: "")
      }
      
      /// en translation: 发送
      /// 
      /// Locales: en, zh-Hans
      static func send(_: Void) -> String {
        return NSLocalizedString("Send", comment: "")
      }
      
      /// en translation: 关于我们
      /// 
      /// Locales: en, zh-Hans
      static func setting_AboutUs(_: Void) -> String {
        return NSLocalizedString("setting_About us", comment: "")
      }
      
      /// en translation: 联系我们
      /// 
      /// Locales: en, zh-Hans
      static func setting_ContactUs(_: Void) -> String {
        return NSLocalizedString("setting_Contact us", comment: "")
      }
      
      /// en translation: 常见问题
      /// 
      /// Locales: en, zh-Hans
      static func setting_FAQ(_: Void) -> String {
        return NSLocalizedString("setting_FAQ", comment: "")
      }
      
      /// en translation: 问题反馈
      /// 
      /// Locales: en, zh-Hans
      static func setting_QuestionFeedback(_: Void) -> String {
        return NSLocalizedString("setting_Question feedback", comment: "")
      }
      
      /// en translation: 宝贝信息
      /// 
      /// Locales: en, zh-Hans
      static func setting_babyInformation(_: Void) -> String {
        return NSLocalizedString("setting_babyInformation", comment: "")
      }
      
      /// en translation: 用户协议
      /// 
      /// Locales: en, zh-Hans
      static func setting_userProtocol(_: Void) -> String {
        return NSLocalizedString("setting_userProtocol", comment: "")
      }
      
      /// en translation: 成功绑定
      /// 
      /// Locales: en, zh-Hans
      static func successfullyBound(_: Void) -> String {
        return NSLocalizedString("Successfully bound", comment: "")
      }
      
      /// en translation: 选择照片
      /// 
      /// Locales: en, zh-Hans
      static func timemachine_choosePhoto(_: Void) -> String {
        return NSLocalizedString("timemachine_choosePhoto", comment: "")
      }
      
      /// en translation: 描述一下这张照片
      /// 
      /// Locales: en, zh-Hans
      static func timemachine_describeThePhoto(_: Void) -> String {
        return NSLocalizedString("timemachine_describeThePhoto", comment: "")
      }
      
      /// en translation: 期待下月精彩照片
      /// 
      /// Locales: en, zh-Hans
      static func timemachine_nextMonth(_: Void) -> String {
        return NSLocalizedString("timemachine_nextMonth", comment: "")
      }
      
      /// en translation: 说点什么吧...
      /// 
      /// Locales: en, zh-Hans
      static func timemachine_saySomeThing(_: Void) -> String {
        return NSLocalizedString("timemachine_saySomeThing", comment: "")
      }
      
      /// en translation: 今年
      /// 
      /// Locales: en, zh-Hans
      static func timemachine_thisYear(_: Void) -> String {
        return NSLocalizedString("timemachine_thisYear", comment: "")
      }
      
      /// en translation: 事件：
      /// 
      /// Locales: en, zh-Hans
      static func trend_content(_: Void) -> String {
        return NSLocalizedString("trend_content", comment: "")
      }
      
      /// en translation: 动态值/次
      /// 
      /// Locales: en, zh-Hans
      static func trend_count_unit(_: Void) -> String {
        return NSLocalizedString("trend_count_unit", comment: "")
      }
      
      /// en translation: 无活动记录
      /// 
      /// Locales: en, zh-Hans
      static func trend_no_data_description(_: Void) -> String {
        return NSLocalizedString("trend_no_data_description", comment: "")
      }
      
      /// en translation: 时间：
      /// 
      /// Locales: en, zh-Hans
      static func trend_time(_: Void) -> String {
        return NSLocalizedString("trend_time", comment: "")
      }
      
      /// en translation: 宝贝动态
      /// 
      /// Locales: en, zh-Hans
      static func trend_title(_: Void) -> String {
        return NSLocalizedString("trend_title", comment: "")
      }
      
      /// en translation: 今天
      /// 
      /// Locales: en, zh-Hans
      static func trend_today(_: Void) -> String {
        return NSLocalizedString("trend_today", comment: "")
      }
      
      /// en translation: 昨天
      /// 
      /// Locales: en, zh-Hans
      static func trend_yesterday(_: Void) -> String {
        return NSLocalizedString("trend_yesterday", comment: "")
      }
      
      /// en translation: 解除绑定
      /// 
      /// Locales: en, zh-Hans
      static func unbind(_: Void) -> String {
        return NSLocalizedString("unbind", comment: "")
      }
      
      /// en translation: 邮箱
      /// 
      /// Locales: en, zh-Hans
      static func userInformation_EMail(_: Void) -> String {
        return NSLocalizedString("userInformation_E-mail", comment: "")
      }
      
      /// en translation: 帐号
      /// 
      /// Locales: en, zh-Hans
      static func userInformation_account(_: Void) -> String {
        return NSLocalizedString("userInformation_account", comment: "")
      }
      
      /// en translation: 宝贝信息
      /// 
      /// Locales: en, zh-Hans
      static func userInformation_babyInformation(_: Void) -> String {
        return NSLocalizedString("userInformation_babyInformation", comment: "")
      }
      
      /// en translation: 修改密码
      /// 
      /// Locales: en, zh-Hans
      static func userInformation_changePassWord(_: Void) -> String {
        return NSLocalizedString("userInformation_changePassWord", comment: "")
      }
      
      /// en translation: 手机
      /// 
      /// Locales: en, zh-Hans
      static func userInformation_mobilePhone(_: Void) -> String {
        return NSLocalizedString("userInformation_mobile-phone", comment: "")
      }
      
      /// en translation: 昵称
      /// 
      /// Locales: en, zh-Hans
      static func userInformation_nicheng(_: Void) -> String {
        return NSLocalizedString("userInformation_nicheng", comment: "")
      }
      
      private init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      private init() {}
    }
    
    /// This `R.string.tuSDK` struct is generated, and contains static references to 214 localization keys.
    struct tuSDK {
      /// Base translation: yyyy年M月d日
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_date_format = StringResource(key: "las_date_format", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周五
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Fri = StringResource(key: "las_week_Fri", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周一
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Mon = StringResource(key: "las_week_Mon", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周六
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Sat = StringResource(key: "las_week_Sat", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周日
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Sun = StringResource(key: "las_week_Sun", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周四
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Thu = StringResource(key: "las_week_Thu", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周二
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Tue = StringResource(key: "las_week_Tue", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 周三
      /// 
      /// Locales: Base, en, zh-Hans
      static let las_week_Wed = StringResource(key: "las_week_Wed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 相册访问失败(%@)
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_ALAssetsLibraryAccessDefaultError = StringResource(key: "lsq_album_ALAssetsLibraryAccessDefaultError%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无法访问相册.请在'设置->隐私->照片'设置 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_ALAssetsLibraryAccessGloballyDeniedError = StringResource(key: "lsq_album_ALAssetsLibraryAccessGloballyDeniedError%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 相册访问失败.请在'设置->隐私->照片'设置 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_ALAssetsLibraryAccessUserDeniedError = StringResource(key: "lsq_album_ALAssetsLibraryAccessUserDeniedError%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无法访问相册
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_ALAssets_error_title = StringResource(key: "lsq_album_ALAssets_error_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 还没有照片
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_empty = StringResource(key: "lsq_album_empty", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 请至少选择一张照片
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_empty_selection_msg = StringResource(key: "lsq_album_empty_selection_msg", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 最多选择 %d 张照片
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_max_selection_msg = StringResource(key: "lsq_album_max_selection_msg", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 相簿
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_title = StringResource(key: "lsq_album_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: %ld 张照片
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_album_total_formatLd = StringResource(key: "lsq_album_total_format%ld", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 从相册选择
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_avatar_actionsheet_album = StringResource(key: "lsq_avatar_actionsheet_album", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 拍照
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_avatar_actionsheet_camera = StringResource(key: "lsq_avatar_actionsheet_camera", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 取消
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_avatar_actionsheet_cancel = StringResource(key: "lsq_avatar_actionsheet_cancel", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 设置头像
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_avatar_actionsheet_title = StringResource(key: "lsq_avatar_actionsheet_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 彩铅
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_ColorLead = StringResource(key: "lsq_brush_ColorLead", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 橡皮擦
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_Eraser = StringResource(key: "lsq_brush_Eraser", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 水粉
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_Gouache = StringResource(key: "lsq_brush_Gouache", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 叶子
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_MapleLeaf = StringResource(key: "lsq_brush_MapleLeaf", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 马赛克
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_Mosaic = StringResource(key: "lsq_brush_Mosaic", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 油画
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_OilPaint = StringResource(key: "lsq_brush_OilPaint", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 水彩
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_WaterColor = StringResource(key: "lsq_brush_WaterColor", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 笔尖：%@
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_size_label = StringResource(key: "lsq_brush_size_label", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 粗
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_size_large = StringResource(key: "lsq_brush_size_large", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 中
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_size_medium = StringResource(key: "lsq_brush_size_medium", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 细
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_brush_size_small = StringResource(key: "lsq_brush_size_small", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 关闭
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_close = StringResource(key: "lsq_button_close", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 我知道了
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_done = StringResource(key: "lsq_button_done", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 闪光灯:
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_flash = StringResource(key: "lsq_button_flash", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 自动
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_flash_model_auto = StringResource(key: "lsq_button_flash_model_auto", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 禁用
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_flash_model_off = StringResource(key: "lsq_button_flash_model_off", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 开启
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_flash_model_open = StringResource(key: "lsq_button_flash_model_open", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 切换镜头
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_button_switch_camera = StringResource(key: "lsq_button_switch_camera", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 取消
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_cancel = StringResource(key: "lsq_cancel", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无法访问系统相机.请在'设置->隐私->相机'设置 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_carema_access_error = StringResource(key: "lsq_carema_access_error%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无法访问系统相机
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_carema_access_error_title = StringResource(key: "lsq_carema_access_error_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 您的设备没有相机功能！
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_carema_no_device = StringResource(key: "lsq_carema_no_device", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: yyyy年M月d日
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_formater = StringResource(key: "lsq_date_formater", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 小时前
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_hours_ago = StringResource(key: "lsq_date_hours_ago", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 分钟前
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_minutes_ago = StringResource(key: "lsq_date_minutes_ago", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 月
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_month = StringResource(key: "lsq_date_month", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 秒前
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_seconds_ago = StringResource(key: "lsq_date_seconds_ago", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 今天
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_today = StringResource(key: "lsq_date_today", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 年
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_date_year = StringResource(key: "lsq_date_year", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正从iCloud下载图片...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_downloading_image = StringResource(key: "lsq_downloading_image", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 自动校色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_auto_adjust = StringResource(key: "lsq_edit_auto_adjust", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 完成
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_button_complete = StringResource(key: "lsq_edit_button_complete", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 1:1
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_cuter_ratio_1_1 = StringResource(key: "lsq_edit_cuter_ratio_1_1", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 2:3
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_cuter_ratio_2_3 = StringResource(key: "lsq_edit_cuter_ratio_2_3", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 3:4
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_cuter_ratio_3_4 = StringResource(key: "lsq_edit_cuter_ratio_3_4", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 9:16
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_cuter_ratio_9_16 = StringResource(key: "lsq_edit_cuter_ratio_9_16", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 原始
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_cuter_ratio_orgin = StringResource(key: "lsq_edit_cuter_ratio_orgin", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 裁切
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_entry_cuter = StringResource(key: "lsq_edit_entry_cuter", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 滤镜
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_entry_filter = StringResource(key: "lsq_edit_entry_filter", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 涂抹
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_entry_smudge = StringResource(key: "lsq_edit_entry_smudge", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 模糊
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_entry_smudge_filter = StringResource(key: "lsq_edit_entry_smudge_filter", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_entry_sticker = StringResource(key: "lsq_edit_entry_sticker", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在处理...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_filter_processing = StringResource(key: "lsq_edit_filter_processing", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 圣光
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_holy_light = StringResource(key: "lsq_edit_holy_light", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在读取...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_loading = StringResource(key: "lsq_edit_loading", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 美化图片
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_multiple_title = StringResource(key: "lsq_edit_multiple_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 发生错误，请确认设备已联网
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_process_error = StringResource(key: "lsq_edit_process_error", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 处理完成
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_processed = StringResource(key: "lsq_edit_processed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在处理...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_processing = StringResource(key: "lsq_edit_processing", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 美颜
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_skin_title = StringResource(key: "lsq_edit_skin_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 重做
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_step_next = StringResource(key: "lsq_edit_step_next", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 撤销
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_step_prev = StringResource(key: "lsq_edit_step_prev", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 编辑
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_edit_title = StringResource(key: "lsq_edit_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 阿宝
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Abao = StringResource(key: "lsq_filter_Abao", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 艺术
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Artistic = StringResource(key: "lsq_filter_Artistic", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 模糊
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_BokehBlur = StringResource(key: "lsq_filter_BokehBlur", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 灿烂
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Brilliant = StringResource(key: "lsq_filter_Brilliant", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 愉悦
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Cheerful = StringResource(key: "lsq_filter_Cheerful", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 清澈
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Clear = StringResource(key: "lsq_filter_Clear", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 着色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Coloration = StringResource(key: "lsq_filter_Coloration", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 褪色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Fade = StringResource(key: "lsq_filter_Fade", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 荧光
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Fluorescent = StringResource(key: "lsq_filter_Fluorescent", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 森林
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Forest = StringResource(key: "lsq_filter_Forest", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 清晨
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Freshmorning = StringResource(key: "lsq_filter_Freshmorning", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 光泽
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Gloss = StringResource(key: "lsq_filter_Gloss", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 和谐
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Harmony = StringResource(key: "lsq_filter_Harmony", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 假日
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Holidaysunshine = StringResource(key: "lsq_filter_Holidaysunshine", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 鲜艳
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Instant = StringResource(key: "lsq_filter_Instant", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 莱卡
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Leica = StringResource(key: "lsq_filter_Leica", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 明亮
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Lightup = StringResource(key: "lsq_filter_Lightup", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: LOMO
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Lomo = StringResource(key: "lsq_filter_Lomo", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 深竹月
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_MagicBlue = StringResource(key: "lsq_filter_MagicBlue", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 沙绿
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_MagicGreen = StringResource(key: "lsq_filter_MagicGreen", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 雪紫
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_MagicPurple = StringResource(key: "lsq_filter_MagicPurple", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 妃红
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_MagicRed = StringResource(key: "lsq_filter_MagicRed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 柠檬
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_MagicYellow = StringResource(key: "lsq_filter_MagicYellow", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 清晨
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Morning = StringResource(key: "lsq_filter_Morning", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 新生
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Newborn = StringResource(key: "lsq_filter_Newborn", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 黑白
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Noir = StringResource(key: "lsq_filter_Noir", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无效果
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Normal = StringResource(key: "lsq_filter_Normal", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 怀旧
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Nostalgic = StringResource(key: "lsq_filter_Nostalgic", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 紫月亮
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Purplemoon = StringResource(key: "lsq_filter_Purplemoon", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 轻松
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Relaxed = StringResource(key: "lsq_filter_Relaxed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 粗犷
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Rough = StringResource(key: "lsq_filter_Rough", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 秋意浓
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SenseOfAutumn = StringResource(key: "lsq_filter_SenseOfAutumn", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 色混美肤
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinColorMixed = StringResource(key: "lsq_filter_SkinColorMixed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 果冻
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinJelly = StringResource(key: "lsq_filter_SkinJelly", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 自然
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinNature = StringResource(key: "lsq_filter_SkinNature", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 黑白
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinNoir = StringResource(key: "lsq_filter_SkinNoir", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 粉嫩
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinPink = StringResource(key: "lsq_filter_SkinPink", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 蜜粉
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinPowder = StringResource(key: "lsq_filter_SkinPowder", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 空间美肤
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinRGBSpace = StringResource(key: "lsq_filter_SkinRGBSpace", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 红润
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinRuddy = StringResource(key: "lsq_filter_SkinRuddy", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 糖水色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinSugar = StringResource(key: "lsq_filter_SkinSugar", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 双混美肤
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinTwiceMixed = StringResource(key: "lsq_filter_SkinTwiceMixed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 双混加强
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinTwiceMixedSigma = StringResource(key: "lsq_filter_SkinTwiceMixedSigma", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 双混美白
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinWhiteMixed = StringResource(key: "lsq_filter_SkinWhiteMixed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 美白
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_SkinWhitening = StringResource(key: "lsq_filter_SkinWhitening", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 夏日
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Summersunshine = StringResource(key: "lsq_filter_Summersunshine", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 浓郁
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Thick = StringResource(key: "lsq_filter_Thick", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 复古
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Vintage = StringResource(key: "lsq_filter_Vintage", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 冬日
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_Wintersunshine = StringResource(key: "lsq_filter_Wintersunshine", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 人像
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Beauty = StringResource(key: "lsq_filter_group_Beauty", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 增强
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Enhance = StringResource(key: "lsq_filter_group_Enhance", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 美食
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Food = StringResource(key: "lsq_filter_group_Food", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 光效
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Glare = StringResource(key: "lsq_filter_group_Glare", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 莱卡
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Leica = StringResource(key: "lsq_filter_group_Leica", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: LOMO
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Lomo = StringResource(key: "lsq_filter_group_Lomo", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 魔法色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_group_Magic = StringResource(key: "lsq_filter_group_Magic", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 在线滤镜
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_online_title = StringResource(key: "lsq_filter_online_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 您是否需要删除滤镜「%@」？
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_remove_msg = StringResource(key: "lsq_filter_remove_msg%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 删除滤镜
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_remove_title = StringResource(key: "lsq_filter_remove_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 调整
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_adjustment = StringResource(key: "lsq_filter_set_adjustment", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 光圈
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_aperture = StringResource(key: "lsq_filter_set_aperture", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 秋意
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_autumnColorThreshold = StringResource(key: "lsq_filter_set_autumnColorThreshold", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 西格玛
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_blurSigma = StringResource(key: "lsq_filter_set_blurSigma", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 强度
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_blurSize = StringResource(key: "lsq_filter_set_blurSize", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 权重
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_blurWeight = StringResource(key: "lsq_filter_set_blurWeight", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 亮度
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_brightness = StringResource(key: "lsq_filter_set_brightness", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 中心X
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_centerX = StringResource(key: "lsq_filter_set_centerX", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 中心Y
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_centerY = StringResource(key: "lsq_filter_set_centerY", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 对比度
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_contrast = StringResource(key: "lsq_filter_set_contrast", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 角度
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_degree = StringResource(key: "lsq_filter_set_degree", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 边缘
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_distanceNormalizationFactor = StringResource(key: "lsq_filter_set_distanceNormalizationFactor", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 边缘
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_excessive = StringResource(key: "lsq_filter_set_excessive", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 曝光度
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_exposure = StringResource(key: "lsq_filter_set_exposure", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 高光
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_highlights = StringResource(key: "lsq_filter_set_highlights", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 色相
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_hue = StringResource(key: "lsq_filter_set_hue", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 范围
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_hueSpace = StringResource(key: "lsq_filter_set_hueSpace", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 线性
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_linear = StringResource(key: "lsq_filter_set_linear", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 强调
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_maskAlpha = StringResource(key: "lsq_filter_set_maskAlpha", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 效果
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_mixied = StringResource(key: "lsq_filter_set_mixied", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 径向
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_radial = StringResource(key: "lsq_filter_set_radial", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 内半径
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_radius = StringResource(key: "lsq_filter_set_radius", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 饱和度
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_saturation = StringResource(key: "lsq_filter_set_saturation", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 选区
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_selective = StringResource(key: "lsq_filter_set_selective", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 阴影
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_shadows = StringResource(key: "lsq_filter_set_shadows", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 锐化
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_sharpness = StringResource(key: "lsq_filter_set_sharpness", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 肤色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_skinColor = StringResource(key: "lsq_filter_set_skinColor", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 肤色
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_skinColorThreshold = StringResource(key: "lsq_filter_set_skinColorThreshold", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 矩阵
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_skinColorThresholdQuadraticMixture = StringResource(key: "lsq_filter_set_skinColorThresholdQuadraticMixture", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 润滑
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_smoothing = StringResource(key: "lsq_filter_set_smoothing", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 色温
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_temperature = StringResource(key: "lsq_filter_set_temperature", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 暗角
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_vignette = StringResource(key: "lsq_filter_set_vignette", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 白皙
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_filter_set_whitening = StringResource(key: "lsq_filter_set_whitening", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 初始化完成
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_inited = StringResource(key: "lsq_inited", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在初始化
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_initing = StringResource(key: "lsq_initing", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 读取图片...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_loading_image = StringResource(key: "lsq_loading_image", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无法获取地理信息.请在'设置->隐私->定位服务'设置 定位服务以及 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_location_AccessUserDeniedError = StringResource(key: "lsq_location_AccessUserDeniedError%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 无法获取地理信息
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_location_error_title = StringResource(key: "lsq_location_error_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 返回
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_nav_back = StringResource(key: "lsq_nav_back", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 取消
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_nav_cancel = StringResource(key: "lsq_nav_cancel", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 完成
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_nav_complete = StringResource(key: "lsq_nav_complete", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 更多
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_nav_more = StringResource(key: "lsq_nav_more", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 删除
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_nav_remove = StringResource(key: "lsq_nav_remove", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 网络连接失败
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_connection_failed = StringResource(key: "lsq_network_connection_failed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 网络连接中断，请检查网络设置
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_connection_interruption = StringResource(key: "lsq_network_connection_interruption", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 服务器连接超时
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_connection_timeout = StringResource(key: "lsq_network_connection_timeout", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 设备无网络
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_connection_without = StringResource(key: "lsq_network_connection_without", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 数据处理失败
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_paser_data_failed = StringResource(key: "lsq_network_paser_data_failed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 服务器请求错误
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_request_error = StringResource(key: "lsq_network_request_error", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 服务器返回错误
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_network_request_return_error = StringResource(key: "lsq_network_request_return_error", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 加载完成
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_refresh_list_view_state_hidden = StringResource(key: "lsq_refresh_list_view_state_hidden", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 上次刷新时间：
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_refresh_list_view_state_lasttime = StringResource(key: "lsq_refresh_list_view_state_lasttime", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在加载更多...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_refresh_list_view_state_load_more = StringResource(key: "lsq_refresh_list_view_state_load_more", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在加载...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_refresh_list_view_state_loading = StringResource(key: "lsq_refresh_list_view_state_loading", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 释放开始刷新
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_refresh_list_view_state_triggered = StringResource(key: "lsq_refresh_list_view_state_triggered", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 下拉刷新
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_refresh_list_view_state_visible = StringResource(key: "lsq_refresh_list_view_state_visible", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 返回
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_reset = StringResource(key: "lsq_reset", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在保存到相册...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_save_saveToAlbum = StringResource(key: "lsq_save_saveToAlbum", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 保存到相册失败
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_save_saveToAlbum_failed = StringResource(key: "lsq_save_saveToAlbum_failed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 保存成功
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_save_saveToAlbum_succeed = StringResource(key: "lsq_save_saveToAlbum_succeed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在处理...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_save_saveToTemp = StringResource(key: "lsq_save_saveToTemp", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 处理完成
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_save_saveToTemp_completed = StringResource(key: "lsq_save_saveToTemp_completed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 处理失败
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_save_saveToTemp_failed = StringResource(key: "lsq_save_saveToTemp_failed", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 设置
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_setting = StringResource(key: "lsq_setting", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 怪咖营地4
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_1_1 = StringResource(key: "lsq_sticker_1_1", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 全部
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_cate_all = StringResource(key: "lsq_sticker_cate_all", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_cate_default = StringResource(key: "lsq_sticker_cate_default", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 相框
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_cate_frame = StringResource(key: "lsq_sticker_cate_frame", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 常用
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_cate_history = StringResource(key: "lsq_sticker_cate_history", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 心情
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_cate_mood = StringResource(key: "lsq_sticker_cate_mood", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 水印
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_cate_watermark = StringResource(key: "lsq_sticker_cate_watermark", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 还没有贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_empty = StringResource(key: "lsq_sticker_empty", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 快去贴纸商店挑选海量贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_empty_msg = StringResource(key: "lsq_sticker_empty_msg", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 贴纸不存在，请换一个试试
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_load_unexsit = StringResource(key: "lsq_sticker_load_unexsit", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 正在加载贴纸...
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_loading = StringResource(key: "lsq_sticker_loading", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 贴纸商店
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_online_title = StringResource(key: "lsq_sticker_online_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: OMG, 同时仅允许使用 %ld 张贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_over_limitLd = StringResource(key: "lsq_sticker_over_limit%ld", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 您是否需要删除贴纸「%@」？
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_remove_msg = StringResource(key: "lsq_sticker_remove_msg%@", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 删除贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_remove_title = StringResource(key: "lsq_sticker_remove_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: 贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_title = StringResource(key: "lsq_sticker_title", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      /// Base translation: %ld 张贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static let lsq_sticker_total_formatLd = StringResource(key: "lsq_sticker_total_format%ld", tableName: "TuSDK", locales: ["Base", "en", "zh-Hans"])
      
      /// Base translation: yyyy年M月d日
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_date_format(_: Void) -> String {
        return NSLocalizedString("las_date_format", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周五
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Fri(_: Void) -> String {
        return NSLocalizedString("las_week_Fri", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周一
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Mon(_: Void) -> String {
        return NSLocalizedString("las_week_Mon", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周六
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Sat(_: Void) -> String {
        return NSLocalizedString("las_week_Sat", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周日
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Sun(_: Void) -> String {
        return NSLocalizedString("las_week_Sun", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周四
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Thu(_: Void) -> String {
        return NSLocalizedString("las_week_Thu", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周二
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Tue(_: Void) -> String {
        return NSLocalizedString("las_week_Tue", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 周三
      /// 
      /// Locales: Base, en, zh-Hans
      static func las_week_Wed(_: Void) -> String {
        return NSLocalizedString("las_week_Wed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 相册访问失败(%@)
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_ALAssetsLibraryAccessDefaultError(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_album_ALAssetsLibraryAccessDefaultError%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 无法访问相册.请在'设置->隐私->照片'设置 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_ALAssetsLibraryAccessGloballyDeniedError(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_album_ALAssetsLibraryAccessGloballyDeniedError%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 相册访问失败.请在'设置->隐私->照片'设置 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_ALAssetsLibraryAccessUserDeniedError(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_album_ALAssetsLibraryAccessUserDeniedError%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 无法访问相册
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_ALAssets_error_title(_: Void) -> String {
        return NSLocalizedString("lsq_album_ALAssets_error_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 还没有照片
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_empty(_: Void) -> String {
        return NSLocalizedString("lsq_album_empty", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 请至少选择一张照片
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_empty_selection_msg(_: Void) -> String {
        return NSLocalizedString("lsq_album_empty_selection_msg", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 最多选择 %d 张照片
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_max_selection_msg(value1: Int) -> String {
        return String(format: NSLocalizedString("lsq_album_max_selection_msg", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 相簿
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_title(_: Void) -> String {
        return NSLocalizedString("lsq_album_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: %ld 张照片
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_album_total_formatLd(value1: Int) -> String {
        return String(format: NSLocalizedString("lsq_album_total_format%ld", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 从相册选择
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_avatar_actionsheet_album(_: Void) -> String {
        return NSLocalizedString("lsq_avatar_actionsheet_album", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 拍照
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_avatar_actionsheet_camera(_: Void) -> String {
        return NSLocalizedString("lsq_avatar_actionsheet_camera", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 取消
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_avatar_actionsheet_cancel(_: Void) -> String {
        return NSLocalizedString("lsq_avatar_actionsheet_cancel", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 设置头像
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_avatar_actionsheet_title(_: Void) -> String {
        return NSLocalizedString("lsq_avatar_actionsheet_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 彩铅
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_ColorLead(_: Void) -> String {
        return NSLocalizedString("lsq_brush_ColorLead", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 橡皮擦
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_Eraser(_: Void) -> String {
        return NSLocalizedString("lsq_brush_Eraser", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 水粉
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_Gouache(_: Void) -> String {
        return NSLocalizedString("lsq_brush_Gouache", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 叶子
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_MapleLeaf(_: Void) -> String {
        return NSLocalizedString("lsq_brush_MapleLeaf", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 马赛克
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_Mosaic(_: Void) -> String {
        return NSLocalizedString("lsq_brush_Mosaic", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 油画
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_OilPaint(_: Void) -> String {
        return NSLocalizedString("lsq_brush_OilPaint", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 水彩
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_WaterColor(_: Void) -> String {
        return NSLocalizedString("lsq_brush_WaterColor", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 笔尖：%@
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_size_label(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_brush_size_label", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 粗
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_size_large(_: Void) -> String {
        return NSLocalizedString("lsq_brush_size_large", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 中
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_size_medium(_: Void) -> String {
        return NSLocalizedString("lsq_brush_size_medium", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 细
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_brush_size_small(_: Void) -> String {
        return NSLocalizedString("lsq_brush_size_small", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 关闭
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_close(_: Void) -> String {
        return NSLocalizedString("lsq_button_close", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 我知道了
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_done(_: Void) -> String {
        return NSLocalizedString("lsq_button_done", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 闪光灯:
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_flash(_: Void) -> String {
        return NSLocalizedString("lsq_button_flash", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 自动
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_flash_model_auto(_: Void) -> String {
        return NSLocalizedString("lsq_button_flash_model_auto", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 禁用
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_flash_model_off(_: Void) -> String {
        return NSLocalizedString("lsq_button_flash_model_off", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 开启
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_flash_model_open(_: Void) -> String {
        return NSLocalizedString("lsq_button_flash_model_open", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 切换镜头
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_button_switch_camera(_: Void) -> String {
        return NSLocalizedString("lsq_button_switch_camera", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 取消
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_cancel(_: Void) -> String {
        return NSLocalizedString("lsq_cancel", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 无法访问系统相机.请在'设置->隐私->相机'设置 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_carema_access_error(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_carema_access_error%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 无法访问系统相机
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_carema_access_error_title(_: Void) -> String {
        return NSLocalizedString("lsq_carema_access_error_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 您的设备没有相机功能！
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_carema_no_device(_: Void) -> String {
        return NSLocalizedString("lsq_carema_no_device", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: yyyy年M月d日
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_formater(_: Void) -> String {
        return NSLocalizedString("lsq_date_formater", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 小时前
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_hours_ago(_: Void) -> String {
        return NSLocalizedString("lsq_date_hours_ago", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 分钟前
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_minutes_ago(_: Void) -> String {
        return NSLocalizedString("lsq_date_minutes_ago", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 月
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_month(_: Void) -> String {
        return NSLocalizedString("lsq_date_month", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 秒前
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_seconds_ago(_: Void) -> String {
        return NSLocalizedString("lsq_date_seconds_ago", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 今天
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_today(_: Void) -> String {
        return NSLocalizedString("lsq_date_today", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 年
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_date_year(_: Void) -> String {
        return NSLocalizedString("lsq_date_year", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正从iCloud下载图片...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_downloading_image(_: Void) -> String {
        return NSLocalizedString("lsq_downloading_image", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 自动校色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_auto_adjust(_: Void) -> String {
        return NSLocalizedString("lsq_edit_auto_adjust", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 完成
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_button_complete(_: Void) -> String {
        return NSLocalizedString("lsq_edit_button_complete", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 1:1
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_cuter_ratio_1_1(_: Void) -> String {
        return NSLocalizedString("lsq_edit_cuter_ratio_1_1", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 2:3
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_cuter_ratio_2_3(_: Void) -> String {
        return NSLocalizedString("lsq_edit_cuter_ratio_2_3", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 3:4
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_cuter_ratio_3_4(_: Void) -> String {
        return NSLocalizedString("lsq_edit_cuter_ratio_3_4", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 9:16
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_cuter_ratio_9_16(_: Void) -> String {
        return NSLocalizedString("lsq_edit_cuter_ratio_9_16", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 原始
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_cuter_ratio_orgin(_: Void) -> String {
        return NSLocalizedString("lsq_edit_cuter_ratio_orgin", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 裁切
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_entry_cuter(_: Void) -> String {
        return NSLocalizedString("lsq_edit_entry_cuter", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 滤镜
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_entry_filter(_: Void) -> String {
        return NSLocalizedString("lsq_edit_entry_filter", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 涂抹
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_entry_smudge(_: Void) -> String {
        return NSLocalizedString("lsq_edit_entry_smudge", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 模糊
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_entry_smudge_filter(_: Void) -> String {
        return NSLocalizedString("lsq_edit_entry_smudge_filter", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_entry_sticker(_: Void) -> String {
        return NSLocalizedString("lsq_edit_entry_sticker", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在处理...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_filter_processing(_: Void) -> String {
        return NSLocalizedString("lsq_edit_filter_processing", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 圣光
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_holy_light(_: Void) -> String {
        return NSLocalizedString("lsq_edit_holy_light", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在读取...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_loading(_: Void) -> String {
        return NSLocalizedString("lsq_edit_loading", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 美化图片
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_multiple_title(_: Void) -> String {
        return NSLocalizedString("lsq_edit_multiple_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 发生错误，请确认设备已联网
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_process_error(_: Void) -> String {
        return NSLocalizedString("lsq_edit_process_error", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 处理完成
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_processed(_: Void) -> String {
        return NSLocalizedString("lsq_edit_processed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在处理...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_processing(_: Void) -> String {
        return NSLocalizedString("lsq_edit_processing", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 美颜
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_skin_title(_: Void) -> String {
        return NSLocalizedString("lsq_edit_skin_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 重做
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_step_next(_: Void) -> String {
        return NSLocalizedString("lsq_edit_step_next", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 撤销
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_step_prev(_: Void) -> String {
        return NSLocalizedString("lsq_edit_step_prev", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 编辑
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_edit_title(_: Void) -> String {
        return NSLocalizedString("lsq_edit_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 阿宝
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Abao(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Abao", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 艺术
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Artistic(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Artistic", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 模糊
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_BokehBlur(_: Void) -> String {
        return NSLocalizedString("lsq_filter_BokehBlur", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 灿烂
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Brilliant(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Brilliant", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 愉悦
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Cheerful(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Cheerful", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 清澈
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Clear(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Clear", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 着色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Coloration(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Coloration", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 褪色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Fade(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Fade", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 荧光
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Fluorescent(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Fluorescent", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 森林
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Forest(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Forest", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 清晨
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Freshmorning(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Freshmorning", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 光泽
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Gloss(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Gloss", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 和谐
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Harmony(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Harmony", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 假日
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Holidaysunshine(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Holidaysunshine", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 鲜艳
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Instant(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Instant", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 莱卡
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Leica(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Leica", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 明亮
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Lightup(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Lightup", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: LOMO
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Lomo(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Lomo", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 深竹月
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_MagicBlue(_: Void) -> String {
        return NSLocalizedString("lsq_filter_MagicBlue", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 沙绿
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_MagicGreen(_: Void) -> String {
        return NSLocalizedString("lsq_filter_MagicGreen", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 雪紫
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_MagicPurple(_: Void) -> String {
        return NSLocalizedString("lsq_filter_MagicPurple", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 妃红
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_MagicRed(_: Void) -> String {
        return NSLocalizedString("lsq_filter_MagicRed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 柠檬
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_MagicYellow(_: Void) -> String {
        return NSLocalizedString("lsq_filter_MagicYellow", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 清晨
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Morning(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Morning", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 新生
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Newborn(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Newborn", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 黑白
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Noir(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Noir", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 无效果
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Normal(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Normal", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 怀旧
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Nostalgic(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Nostalgic", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 紫月亮
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Purplemoon(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Purplemoon", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 轻松
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Relaxed(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Relaxed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 粗犷
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Rough(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Rough", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 秋意浓
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SenseOfAutumn(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SenseOfAutumn", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 色混美肤
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinColorMixed(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinColorMixed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 果冻
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinJelly(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinJelly", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 自然
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinNature(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinNature", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 黑白
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinNoir(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinNoir", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 粉嫩
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinPink(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinPink", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 蜜粉
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinPowder(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinPowder", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 空间美肤
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinRGBSpace(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinRGBSpace", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 红润
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinRuddy(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinRuddy", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 糖水色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinSugar(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinSugar", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 双混美肤
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinTwiceMixed(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinTwiceMixed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 双混加强
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinTwiceMixedSigma(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinTwiceMixedSigma", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 双混美白
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinWhiteMixed(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinWhiteMixed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 美白
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_SkinWhitening(_: Void) -> String {
        return NSLocalizedString("lsq_filter_SkinWhitening", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 夏日
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Summersunshine(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Summersunshine", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 浓郁
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Thick(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Thick", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 复古
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Vintage(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Vintage", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 冬日
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_Wintersunshine(_: Void) -> String {
        return NSLocalizedString("lsq_filter_Wintersunshine", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 人像
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Beauty(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Beauty", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 增强
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Enhance(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Enhance", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 美食
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Food(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Food", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 光效
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Glare(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Glare", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 莱卡
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Leica(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Leica", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: LOMO
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Lomo(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Lomo", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 魔法色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_group_Magic(_: Void) -> String {
        return NSLocalizedString("lsq_filter_group_Magic", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 在线滤镜
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_online_title(_: Void) -> String {
        return NSLocalizedString("lsq_filter_online_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 您是否需要删除滤镜「%@」？
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_remove_msg(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_filter_remove_msg%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 删除滤镜
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_remove_title(_: Void) -> String {
        return NSLocalizedString("lsq_filter_remove_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 调整
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_adjustment(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_adjustment", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 光圈
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_aperture(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_aperture", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 秋意
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_autumnColorThreshold(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_autumnColorThreshold", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 西格玛
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_blurSigma(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_blurSigma", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 强度
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_blurSize(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_blurSize", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 权重
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_blurWeight(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_blurWeight", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 亮度
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_brightness(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_brightness", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 中心X
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_centerX(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_centerX", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 中心Y
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_centerY(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_centerY", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 对比度
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_contrast(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_contrast", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 角度
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_degree(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_degree", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 边缘
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_distanceNormalizationFactor(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_distanceNormalizationFactor", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 边缘
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_excessive(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_excessive", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 曝光度
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_exposure(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_exposure", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 高光
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_highlights(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_highlights", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 色相
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_hue(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_hue", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 范围
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_hueSpace(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_hueSpace", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 线性
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_linear(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_linear", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 强调
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_maskAlpha(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_maskAlpha", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 效果
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_mixied(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_mixied", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 径向
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_radial(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_radial", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 内半径
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_radius(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_radius", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 饱和度
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_saturation(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_saturation", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 选区
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_selective(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_selective", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 阴影
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_shadows(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_shadows", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 锐化
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_sharpness(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_sharpness", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 肤色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_skinColor(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_skinColor", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 肤色
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_skinColorThreshold(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_skinColorThreshold", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 矩阵
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_skinColorThresholdQuadraticMixture(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_skinColorThresholdQuadraticMixture", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 润滑
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_smoothing(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_smoothing", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 色温
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_temperature(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_temperature", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 暗角
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_vignette(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_vignette", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 白皙
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_filter_set_whitening(_: Void) -> String {
        return NSLocalizedString("lsq_filter_set_whitening", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 初始化完成
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_inited(_: Void) -> String {
        return NSLocalizedString("lsq_inited", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在初始化
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_initing(_: Void) -> String {
        return NSLocalizedString("lsq_initing", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 读取图片...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_loading_image(_: Void) -> String {
        return NSLocalizedString("lsq_loading_image", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 无法获取地理信息.请在'设置->隐私->定位服务'设置 定位服务以及 %@ 为打开状态.
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_location_AccessUserDeniedError(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_location_AccessUserDeniedError%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 无法获取地理信息
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_location_error_title(_: Void) -> String {
        return NSLocalizedString("lsq_location_error_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 返回
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_nav_back(_: Void) -> String {
        return NSLocalizedString("lsq_nav_back", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 取消
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_nav_cancel(_: Void) -> String {
        return NSLocalizedString("lsq_nav_cancel", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 完成
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_nav_complete(_: Void) -> String {
        return NSLocalizedString("lsq_nav_complete", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 更多
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_nav_more(_: Void) -> String {
        return NSLocalizedString("lsq_nav_more", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 删除
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_nav_remove(_: Void) -> String {
        return NSLocalizedString("lsq_nav_remove", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 网络连接失败
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_connection_failed(_: Void) -> String {
        return NSLocalizedString("lsq_network_connection_failed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 网络连接中断，请检查网络设置
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_connection_interruption(_: Void) -> String {
        return NSLocalizedString("lsq_network_connection_interruption", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 服务器连接超时
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_connection_timeout(_: Void) -> String {
        return NSLocalizedString("lsq_network_connection_timeout", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 设备无网络
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_connection_without(_: Void) -> String {
        return NSLocalizedString("lsq_network_connection_without", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 数据处理失败
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_paser_data_failed(_: Void) -> String {
        return NSLocalizedString("lsq_network_paser_data_failed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 服务器请求错误
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_request_error(_: Void) -> String {
        return NSLocalizedString("lsq_network_request_error", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 服务器返回错误
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_network_request_return_error(_: Void) -> String {
        return NSLocalizedString("lsq_network_request_return_error", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 加载完成
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_refresh_list_view_state_hidden(_: Void) -> String {
        return NSLocalizedString("lsq_refresh_list_view_state_hidden", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 上次刷新时间：
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_refresh_list_view_state_lasttime(_: Void) -> String {
        return NSLocalizedString("lsq_refresh_list_view_state_lasttime", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在加载更多...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_refresh_list_view_state_load_more(_: Void) -> String {
        return NSLocalizedString("lsq_refresh_list_view_state_load_more", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在加载...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_refresh_list_view_state_loading(_: Void) -> String {
        return NSLocalizedString("lsq_refresh_list_view_state_loading", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 释放开始刷新
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_refresh_list_view_state_triggered(_: Void) -> String {
        return NSLocalizedString("lsq_refresh_list_view_state_triggered", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 下拉刷新
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_refresh_list_view_state_visible(_: Void) -> String {
        return NSLocalizedString("lsq_refresh_list_view_state_visible", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 返回
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_reset(_: Void) -> String {
        return NSLocalizedString("lsq_reset", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在保存到相册...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_save_saveToAlbum(_: Void) -> String {
        return NSLocalizedString("lsq_save_saveToAlbum", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 保存到相册失败
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_save_saveToAlbum_failed(_: Void) -> String {
        return NSLocalizedString("lsq_save_saveToAlbum_failed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 保存成功
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_save_saveToAlbum_succeed(_: Void) -> String {
        return NSLocalizedString("lsq_save_saveToAlbum_succeed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在处理...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_save_saveToTemp(_: Void) -> String {
        return NSLocalizedString("lsq_save_saveToTemp", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 处理完成
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_save_saveToTemp_completed(_: Void) -> String {
        return NSLocalizedString("lsq_save_saveToTemp_completed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 处理失败
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_save_saveToTemp_failed(_: Void) -> String {
        return NSLocalizedString("lsq_save_saveToTemp_failed", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 设置
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_setting(_: Void) -> String {
        return NSLocalizedString("lsq_setting", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 怪咖营地4
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_1_1(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_1_1", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 全部
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_cate_all(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_cate_all", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_cate_default(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_cate_default", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 相框
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_cate_frame(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_cate_frame", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 常用
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_cate_history(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_cate_history", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 心情
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_cate_mood(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_cate_mood", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 水印
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_cate_watermark(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_cate_watermark", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 还没有贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_empty(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_empty", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 快去贴纸商店挑选海量贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_empty_msg(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_empty_msg", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 贴纸不存在，请换一个试试
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_load_unexsit(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_load_unexsit", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 正在加载贴纸...
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_loading(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_loading", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 贴纸商店
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_online_title(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_online_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: OMG, 同时仅允许使用 %ld 张贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_over_limitLd(value1: Int) -> String {
        return String(format: NSLocalizedString("lsq_sticker_over_limit%ld", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 您是否需要删除贴纸「%@」？
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_remove_msg(value1: String) -> String {
        return String(format: NSLocalizedString("lsq_sticker_remove_msg%@", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      /// Base translation: 删除贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_remove_title(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_remove_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: 贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_title(_: Void) -> String {
        return NSLocalizedString("lsq_sticker_title", tableName: "TuSDK", comment: "")
      }
      
      /// Base translation: %ld 张贴纸
      /// 
      /// Locales: Base, en, zh-Hans
      static func lsq_sticker_total_formatLd(value1: Int) -> String {
        return String(format: NSLocalizedString("lsq_sticker_total_format%ld", tableName: "TuSDK", comment: ""), locale: _R.applicationLocale, value1)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.youyisnet.babyCam") ?? NSBundle.mainBundle()
  
  struct nib {
    struct _LUNLabelsView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "LUNLabelsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _LUNStaticView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "LUNStaticView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard {
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}